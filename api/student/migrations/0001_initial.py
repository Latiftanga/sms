# Generated by Django 5.2 on 2025-05-05 15:23

import core.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0003_remove_user_is_guardian'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('year', models.CharField(help_text="Academic year (e.g., '2024-2025')", max_length=9, unique=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_current', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['-year'],
            },
        ),
        migrations.CreateModel(
            name='Guardian',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(choices=[('Mr.', 'Mr.'), ('Mrs.', 'Mrs.'), ('Ms.', 'Ms.'), ('Miss', 'Miss'), ('Dr.', 'Dr.'), ('Prof.', 'Prof.'), ('Rev.', 'Rev.'), ('Sheikh', 'Sheikh'), ('Maulvi', 'Maulvi'), ('Mallam', 'Mallam')], max_length=16)),
                ('name', models.CharField(max_length=128)),
                ('phone', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message="Phone number must be 10-15 digits, optionally starting with '+'", regex='^\\+?\\d{10,15}$')])),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('address', models.CharField(max_length=255)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='guardians', to='core.school')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='guardian_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'guardian',
                'verbose_name_plural': 'guardians',
            },
        ),
        migrations.CreateModel(
            name='Programme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=128, verbose_name='Programme Name')),
                ('code', models.CharField(blank=True, max_length=64, verbose_name='Programme Code')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='programmes', to='core.school', verbose_name='School')),
            ],
            options={
                'verbose_name': 'Programme',
                'verbose_name_plural': 'Programmes',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stage', models.CharField(choices=[('KG', 'Kindergarten'), ('PR', 'Primary School'), ('JHS', 'Junior High School'), ('SHS', 'Senior High School')], db_index=True, max_length=5)),
                ('stream', models.CharField(help_text="Stream/section designation (e.g., 'A', 'Gold')", max_length=128, unique=True)),
                ('level', models.PositiveSmallIntegerField(help_text='Numerical ordering within stage (1-6 for primary, 1-3 for JHS/SHS)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(6)])),
                ('programme', models.ForeignKey(blank=True, help_text='For SHS only (e.g. Science, Arts etc.)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='classes', to='student.programme')),
            ],
            options={
                'verbose_name': 'Class',
                'verbose_name_plural': 'Classes',
                'ordering': ['stage', 'level'],
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('first_name', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(2)])),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_name', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(2)])),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1)),
                ('date_of_birth', models.DateField()),
                ('phone', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be 10-15 digits, optionally starting with '+'", regex='^\\+?\\d{10,15}$')])),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(blank=True, max_length=128, null=True)),
                ('ghana_card_number', models.CharField(blank=True, max_length=15, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Ghana Card must follow format: GHA-123456789-1', regex='^GHA-\\d{9}-\\d$')])),
                ('is_active', models.BooleanField(default=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('student_id', models.CharField(blank=True, max_length=20, unique=True)),
                ('year_admitted', models.PositiveIntegerField(default=2025)),
                ('status', models.CharField(choices=[('active', 'Active'), ('graduated', 'Graduated'), ('withdrawn', 'Withdrawn'), ('suspended', 'Suspended'), ('transferred', 'Transferred')], default='active', max_length=20)),
                ('current_class', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='students', to='student.class')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)ss', to='core.school')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'student',
                'verbose_name_plural': 'students',
            },
            bases=(models.Model, core.models.IDGenerationMixin),
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date_enrolled', models.DateField(default=django.utils.timezone.now)),
                ('status', models.CharField(choices=[('active', 'Active'), ('completed', 'Completed'), ('withdrawn', 'Withdrawn'), ('promoted', 'Promoted'), ('repeated', 'Repeated')], default='active', max_length=20)),
                ('academic_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='student.academicyear')),
                ('grade_level', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='enrollments', to='student.class')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='student.student')),
            ],
        ),
        migrations.CreateModel(
            name='StudentGuardian',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('relationship', models.CharField(choices=[('parent', 'Parent'), ('guardian', 'Guardian'), ('father', 'Father'), ('mother', 'Mother'), ('uncle', 'Uncle'), ('aunt', 'Aunt'), ('grandparent', 'Grandparent'), ('sibling', 'Sibling'), ('other', 'Other')], default='guardian', max_length=20)),
                ('is_primary', models.BooleanField(default=False, help_text='Indicates if this guardian is the primary contact for the student')),
                ('can_pickup', models.BooleanField(default=True, help_text='Indicates if this guardian is authorized to pickup the student')),
                ('emergency_contact', models.BooleanField(default=False, help_text='Indicates if this guardian is an emergency contact')),
                ('guardian', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='guardian_students', to='student.guardian')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_guardians', to='student.student')),
            ],
            options={
                'verbose_name': 'student guardian relationship',
                'verbose_name_plural': 'student guardian relationships',
            },
        ),
        migrations.AddField(
            model_name='student',
            name='guardians',
            field=models.ManyToManyField(related_name='wards', through='student.StudentGuardian', to='student.guardian'),
        ),
        migrations.CreateModel(
            name='StudentVoucher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_number', models.CharField(editable=False, max_length=15, unique=True)),
                ('pin', models.CharField(editable=False, max_length=12)),
                ('can_signin', models.BooleanField(default=False)),
                ('is_used', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('used_at', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('grade_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_vouchers', to='student.class')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.school')),
                ('used_by', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registration_voucher', to='student.student')),
                ('used_by_guardian', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='registration_voucher', to='student.guardian')),
            ],
            options={
                'verbose_name': 'Student Voucher',
                'verbose_name_plural': 'Student Vouchers',
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.AddIndex(
            model_name='guardian',
            index=models.Index(fields=['phone'], name='student_gua_phone_f46eb1_idx'),
        ),
        migrations.AddIndex(
            model_name='guardian',
            index=models.Index(fields=['email'], name='student_gua_email_1b4d90_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='programme',
            unique_together={('school', 'code'), ('school', 'name')},
        ),
        migrations.AddIndex(
            model_name='class',
            index=models.Index(fields=['stage'], name='student_cla_stage_9fbec9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='class',
            unique_together={('stage', 'level')},
        ),
        migrations.AddIndex(
            model_name='enrollment',
            index=models.Index(fields=['student', 'academic_year'], name='student_enr_student_7116fc_idx'),
        ),
        migrations.AddIndex(
            model_name='enrollment',
            index=models.Index(fields=['grade_level', 'academic_year'], name='student_enr_grade_l_6ece1b_idx'),
        ),
        migrations.AddIndex(
            model_name='enrollment',
            index=models.Index(fields=['status'], name='student_enr_status_a1bcaf_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='enrollment',
            unique_together={('student', 'academic_year')},
        ),
        migrations.AddIndex(
            model_name='studentguardian',
            index=models.Index(fields=['student', 'is_primary'], name='student_stu_student_c3a4aa_idx'),
        ),
        migrations.AddIndex(
            model_name='studentguardian',
            index=models.Index(fields=['guardian', 'relationship'], name='student_stu_guardia_60d94c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='studentguardian',
            unique_together={('student', 'guardian')},
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['student_id'], name='student_stu_student_bb3d1e_idx'),
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['school', 'year_admitted'], name='student_stu_school__aad0ed_idx'),
        ),
        migrations.AddIndex(
            model_name='student',
            index=models.Index(fields=['status'], name='student_stu_status_b5bb73_idx'),
        ),
        migrations.AddIndex(
            model_name='studentvoucher',
            index=models.Index(fields=['serial_number'], name='student_stu_serial__b88efc_idx'),
        ),
        migrations.AddIndex(
            model_name='studentvoucher',
            index=models.Index(fields=['is_used'], name='student_stu_is_used_39e2c2_idx'),
        ),
    ]
