# Generated by Django 5.2.3 on 2025-06-15 11:02

import django.core.validators
import django.db.models.deletion
import school.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Programme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('code', models.CharField(blank=True, editable=False, max_length=5, unique=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'Programme',
                'verbose_name_plural': 'Programmes',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('code', models.CharField(help_text='Short code for the school (e.g., TIA)', max_length=10, unique=True)),
                ('school_type', models.CharField(choices=[('basic', 'Basic School'), ('shs', 'Senior High School (SHS)'), ('technical', 'Technical/Vocational School'), ('combined', 'Combined School (Multiple Levels)')], max_length=20)),
                ('ownership', models.CharField(choices=[('public', 'Public/Government'), ('private', 'Private'), ('mission', 'Mission/Religious'), ('international', 'International')], max_length=20)),
                ('emis_code', models.CharField(blank=True, help_text='Educational Management Information System code', max_length=50, null=True, unique=True, verbose_name='EMIS Code')),
                ('ges_number', models.CharField(blank=True, max_length=50, null=True, verbose_name='GES Number')),
                ('registration_date', models.DateTimeField(auto_now_add=True)),
                ('establishment_date', models.DateField(blank=True, null=True, verbose_name='Date of Establishment')),
                ('region', models.CharField(choices=[('greater_accra', 'Greater Accra'), ('ashanti', 'Ashanti'), ('western', 'Western'), ('eastern', 'Eastern'), ('central', 'Central'), ('volta', 'Volta'), ('northern', 'Northern'), ('upper_east', 'Upper East'), ('upper_west', 'Upper West'), ('bono', 'Bono'), ('ahafo', 'Ahafo'), ('bono_east', 'Bono East'), ('north_east', 'North East'), ('savannah', 'Savannah'), ('oti', 'Oti'), ('western_north', 'Western North')], max_length=20)),
                ('district', models.CharField(max_length=100)),
                ('town', models.CharField(max_length=100)),
                ('digital_address', models.CharField(blank=True, max_length=50, null=True, verbose_name='Ghana Post Digital Address')),
                ('physical_address', models.CharField(blank=True, max_length=255, null=True)),
                ('headmaster_name', models.CharField(max_length=255, verbose_name='Headmaster/Principal Name')),
                ('email', models.EmailField(max_length=254)),
                ('phone_primary', models.CharField(max_length=20)),
                ('phone_secondary', models.CharField(blank=True, max_length=20, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='school_logos/')),
                ('motto', models.CharField(blank=True, max_length=255, null=True)),
                ('primary_color', models.CharField(default='#1B5E20', max_length=7)),
                ('secondary_color', models.CharField(default='#2E7D32', max_length=7)),
                ('accent_color', models.CharField(default='#FFB300', max_length=7)),
                ('has_boarding', models.BooleanField(default=False, verbose_name='Offers Boarding Facilities')),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'School',
                'verbose_name_plural': 'Schools',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('subject_type', models.CharField(choices=[('core', 'Core'), ('elective', 'Elective'), ('extracurricular', 'Extracurricular Activity')], default='core', help_text='Type of subject', max_length=50)),
                ('code', models.CharField(blank=True, help_text='Short code for the subject (e.g., ENG for English)', max_length=10, unique=True)),
            ],
            options={
                'verbose_name': 'Subject',
                'verbose_name_plural': 'Subjects',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('username', models.CharField(max_length=150, unique=True)),
                ('email', models.EmailField(blank=True, max_length=255, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_teacher', models.BooleanField(default=False)),
                ('is_student', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Class section (e.g., A, B, C)', max_length=10)),
                ('level', models.PositiveSmallIntegerField(choices=[(1, 'Form 1'), (2, 'Form 2'), (3, 'Form 3')], help_text='Class level (1, 2, or 3)')),
                ('capacity', models.PositiveIntegerField(default=45, help_text='Maximum number of students')),
                ('programme', models.ForeignKey(blank=True, help_text='Academic programme (optional for SHS 1)', null=True, on_delete=django.db.models.deletion.CASCADE, to='school.programme')),
            ],
            options={
                'verbose_name': 'Class',
                'verbose_name_plural': 'Classes',
                'ordering': ['level', 'programme__code', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('first_name', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(2)])),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_name', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(2)])),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1)),
                ('date_of_birth', models.DateField()),
                ('phone', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='Phone number must be in format: +233XXXXXXXXX or 0XXXXXXXXX', regex='^(\\+233|0)[0-9]{9}$')])),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(blank=True, max_length=128, null=True)),
                ('ghana_card_number', models.CharField(blank=True, max_length=15, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Ghana Card number must be in format: GHA-XXXXXXXXX-X', regex='^GHA-[0-9]{9}-[0-9]$')])),
                ('is_active', models.BooleanField(default=True)),
                ('student_id', models.CharField(editable=False, help_text='Auto-generated student ID', max_length=20, unique=True)),
                ('year_admitted', models.PositiveIntegerField(default=2025, help_text='Year the student was admitted to the school', verbose_name='Year Admitted')),
                ('guardian_name', models.CharField(blank=True, max_length=200)),
                ('guardian_phone', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator(message='Phone number must be in format: +233XXXXXXXXX or 0XXXXXXXXX', regex='^(\\+233|0)[0-9]{9}$')])),
                ('guardian_email', models.EmailField(blank=True, max_length=254)),
                ('guardian_relationship', models.CharField(blank=True, help_text='Relationship to student (e.g., Father, Mother, Uncle)', max_length=50)),
                ('guardian_address', models.TextField(blank=True)),
                ('currentClass', models.ForeignKey(blank=True, help_text="Student's current class", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='students', to='school.class', verbose_name='Current Class')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
                'ordering': ['last_name', 'first_name'],
            },
            bases=(models.Model, school.models.IDGenerationMixin),
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('first_name', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(2)])),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_name', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(2)])),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=1)),
                ('date_of_birth', models.DateField()),
                ('phone', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='Phone number must be in format: +233XXXXXXXXX or 0XXXXXXXXX', regex='^(\\+233|0)[0-9]{9}$')])),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(blank=True, max_length=128, null=True)),
                ('ghana_card_number', models.CharField(blank=True, max_length=15, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Ghana Card number must be in format: GHA-XXXXXXXXX-X', regex='^GHA-[0-9]{9}-[0-9]$')])),
                ('is_active', models.BooleanField(default=True)),
                ('teacher_id', models.CharField(editable=False, help_text='Auto-generated teacher ID', max_length=20, unique=True)),
                ('classes', models.ManyToManyField(blank=True, help_text='Classes assigned to the teacher', related_name='teachers', to='school.class')),
                ('subjects', models.ManyToManyField(blank=True, help_text='Subjects taught by the teacher', related_name='teachers', to='school.subject')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Teacher',
                'verbose_name_plural': 'Teachers',
                'ordering': ['last_name', 'first_name'],
            },
            bases=(models.Model, school.models.IDGenerationMixin),
        ),
        migrations.AddField(
            model_name='class',
            name='class_teacher',
            field=models.ForeignKey(blank=True, help_text='Form teacher for this class', null=True, on_delete=django.db.models.deletion.SET_NULL, to='school.teacher'),
        ),
        migrations.AlterUniqueTogether(
            name='class',
            unique_together={('level', 'programme', 'name')},
        ),
    ]
