[
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "account.models",
        "description": "account.models",
        "isExtraImport": true,
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "create_student_with_user",
        "importPath": "account.models",
        "description": "account.models",
        "isExtraImport": true,
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "create_teacher_with_user",
        "importPath": "account.models",
        "description": "account.models",
        "isExtraImport": true,
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "create_student_with_user",
        "importPath": "account.models",
        "description": "account.models",
        "isExtraImport": true,
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "account.models",
        "description": "account.models",
        "isExtraImport": true,
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "account.models",
        "description": "account.models",
        "isExtraImport": true,
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "account.models",
        "description": "account.models",
        "isExtraImport": true,
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "account.models",
        "description": "account.models",
        "isExtraImport": true,
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "create_student_with_user",
        "importPath": "account.models",
        "description": "account.models",
        "isExtraImport": true,
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "account.models",
        "description": "account.models",
        "isExtraImport": true,
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "template",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "AuthenticationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.base_user",
        "description": "django.contrib.auth.base_user",
        "isExtraImport": true,
        "detail": "django.contrib.auth.base_user",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "PermissionsMixin",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "UserManager",
        "importPath": "account.managers",
        "description": "account.managers",
        "isExtraImport": true,
        "detail": "account.managers",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "school.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "school.models",
        "description": "school.models",
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Teacher",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "School",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "AcademicYear",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Programme",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "House",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Class",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Subject",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Teacher",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Class",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Class",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "House",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "School",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "AcademicYear",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Programme",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "House",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Subject",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "School",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "AcademicYear",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Programme",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "House",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Subject",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Class",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "House",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Programme",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "School",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "AcademicYear",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Term",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "School",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "AcademicYear",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Term",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Subject",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Class",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Teacher",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "School",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "AcademicYear",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Term",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Programme",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "House",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Subject",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Class",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Teacher",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "School",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Class",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "House",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Programme",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Class",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "House",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Programme",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "School",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Class",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "House",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Programme",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Class",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "House",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Programme",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "AcademicYear",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Term",
        "importPath": "school.models",
        "description": "school.models",
        "isExtraImport": true,
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "account",
        "description": "account",
        "isExtraImport": true,
        "detail": "account",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "user_passes_test",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "csrf_protect",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "never_cache",
        "importPath": "django.views.decorators.cache",
        "description": "django.views.decorators.cache",
        "isExtraImport": true,
        "detail": "django.views.decorators.cache",
        "documentation": {}
    },
    {
        "label": "LoginView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "LogoutView",
        "importPath": "django.contrib.auth.views",
        "description": "django.contrib.auth.views",
        "isExtraImport": true,
        "detail": "django.contrib.auth.views",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "constants",
        "importPath": "django.contrib.messages",
        "description": "django.contrib.messages",
        "isExtraImport": true,
        "detail": "django.contrib.messages",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "home_view",
        "importPath": "core.views",
        "description": "core.views",
        "isExtraImport": true,
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "BaseCommand",
        "importPath": "django.core.management.base",
        "description": "django.core.management.base",
        "isExtraImport": true,
        "detail": "django.core.management.base",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "export_students_to_csv",
        "importPath": "student.utils",
        "description": "student.utils",
        "isExtraImport": true,
        "detail": "student.utils",
        "documentation": {}
    },
    {
        "label": "promote_students",
        "importPath": "student.utils",
        "description": "student.utils",
        "isExtraImport": true,
        "detail": "student.utils",
        "documentation": {}
    },
    {
        "label": "Faker",
        "importPath": "faker",
        "description": "faker",
        "isExtraImport": true,
        "detail": "faker",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "mark_safe",
        "importPath": "django.utils.safestring",
        "description": "django.utils.safestring",
        "isExtraImport": true,
        "detail": "django.utils.safestring",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "core",
        "description": "core",
        "isExtraImport": true,
        "detail": "core",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "school",
        "description": "school",
        "isExtraImport": true,
        "detail": "school",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "student",
        "description": "student",
        "isExtraImport": true,
        "detail": "student",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "PermissionDenied",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "UserPassesTestMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "UserPassesTestMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "UserPassesTestMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {}
    },
    {
        "label": "colorsys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "colorsys",
        "description": "colorsys",
        "detail": "colorsys",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "role_required",
        "importPath": "core.permissions",
        "description": "core.permissions",
        "isExtraImport": true,
        "detail": "core.permissions",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "OperationalError",
        "importPath": "psycopg2",
        "description": "psycopg2",
        "isExtraImport": true,
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "OperationalError",
        "importPath": "django.db.utils",
        "description": "django.db.utils",
        "isExtraImport": true,
        "detail": "django.db.utils",
        "documentation": {}
    },
    {
        "label": "django.core.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MinLengthValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "RegexValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DeleteView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DetailView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DetailView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "DeleteView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "pre_delete",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "Client",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "SimpleUploadedFile",
        "importPath": "django.core.files.uploadedfile",
        "description": "django.core.files.uploadedfile",
        "isExtraImport": true,
        "detail": "django.core.files.uploadedfile",
        "documentation": {}
    },
    {
        "label": "FormView",
        "importPath": "django.views.generic.edit",
        "description": "django.views.generic.edit",
        "isExtraImport": true,
        "detail": "django.views.generic.edit",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {}
    },
    {
        "label": "method_decorator",
        "importPath": "django.utils.decorators",
        "description": "django.utils.decorators",
        "isExtraImport": true,
        "detail": "django.utils.decorators",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "account.migrations.0001_initial",
        "description": "account.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "account.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "kind": 6,
        "importPath": "account.admin",
        "description": "account.admin",
        "peekOfCode": "class UserAdmin(BaseUserAdmin):\n    list_display = ('username', 'email', 'get_full_name', 'is_student', 'is_teacher', 'is_admin', 'is_active', 'date_joined')\n    list_filter = ('is_student', 'is_teacher', 'is_admin', 'is_staff', 'is_superuser', 'is_active', 'date_joined')\n    search_fields = ('username', 'email', 'first_name', 'last_name')\n    ordering = ('-date_joined',)\n    fieldsets = (\n        (None, {'fields': ('username', 'password')}),\n        ('Personal info', {'fields': ('first_name', 'last_name', 'email')}),\n        ('School Permissions', {'fields': ('is_student', 'is_teacher', 'is_admin')}),\n        ('Django Permissions', {'fields': ('is_active', 'is_staff', 'is_superuser', 'groups', 'user_permissions')}),",
        "detail": "account.admin",
        "documentation": {}
    },
    {
        "label": "AccountConfig",
        "kind": 6,
        "importPath": "account.apps",
        "description": "account.apps",
        "peekOfCode": "class AccountConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'account'",
        "detail": "account.apps",
        "documentation": {}
    },
    {
        "label": "CustomLoginForm",
        "kind": 6,
        "importPath": "account.forms",
        "description": "account.forms",
        "peekOfCode": "class CustomLoginForm(AuthenticationForm):\n    \"\"\"Custom login form with Bootstrap styling\"\"\"\n    username = forms.CharField(\n        max_length=150,\n        widget=forms.TextInput(attrs={\n            'class': 'form-control',\n            'placeholder': 'Enter your username or ID',\n            'autofocus': True\n        })\n    )",
        "detail": "account.forms",
        "documentation": {}
    },
    {
        "label": "UserCreateForm",
        "kind": 6,
        "importPath": "account.forms",
        "description": "account.forms",
        "peekOfCode": "class UserCreateForm(UserCreationForm):\n    \"\"\"Form for creating new users\"\"\"\n    email = forms.EmailField(\n        required=False,\n        widget=forms.EmailInput(attrs={\n            'class': 'form-control',\n            'placeholder': 'Email address (optional)'\n        })\n    )\n    first_name = forms.CharField(",
        "detail": "account.forms",
        "documentation": {}
    },
    {
        "label": "AdminCreateForm",
        "kind": 6,
        "importPath": "account.forms",
        "description": "account.forms",
        "peekOfCode": "class AdminCreateForm(forms.ModelForm):\n    \"\"\"Form for creating admin users\"\"\"\n    password1 = forms.CharField(\n        label='Password',\n        widget=forms.PasswordInput(attrs={\n            'class': 'form-control',\n            'placeholder': 'Password'\n        })\n    )\n    password2 = forms.CharField(",
        "detail": "account.forms",
        "documentation": {}
    },
    {
        "label": "UserManager",
        "kind": 6,
        "importPath": "account.managers",
        "description": "account.managers",
        "peekOfCode": "class UserManager(BaseUserManager):\n    \"\"\"Custom user manager for Django authentication\"\"\"\n    def create_user(self, username, email=None, password=None, **extra_fields):\n        \"\"\"Create and save a regular user\"\"\"\n        if not username:\n            raise ValueError('The username field must be set')\n        extra_fields.setdefault('is_staff', False)\n        extra_fields.setdefault('is_superuser', False)\n        if email:\n            email = self.normalize_email(email)",
        "detail": "account.managers",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "account.models",
        "description": "account.models",
        "peekOfCode": "class User(AbstractBaseUser, PermissionsMixin):\n    \"\"\"Custom User model for Django authentication\"\"\"\n    # Core fields required by Django\n    username = models.CharField(max_length=150, unique=True)\n    email = models.EmailField(max_length=255, blank=True, null=True)\n    first_name = models.CharField(max_length=150, blank=True)\n    last_name = models.CharField(max_length=150, blank=True)\n    # Permission fields (from PermissionsMixin)\n    is_active = models.BooleanField(default=True)\n    is_staff = models.BooleanField(default=False)",
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "generate_random_password",
        "kind": 2,
        "importPath": "account.models",
        "description": "account.models",
        "peekOfCode": "def generate_random_password(length=8):\n    \"\"\"Generate a random password\"\"\"\n    characters = string.ascii_letters + string.digits\n    return ''.join(random.choice(characters) for _ in range(length))\ndef create_student_with_user(\n    first_name, last_name, year_admitted,\n    password=None, email=None, **student_data):\n    \"\"\"Create both User account AND Student profile\"\"\"\n    from school.models import Student\n    from account.models import User",
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "create_student_with_user",
        "kind": 2,
        "importPath": "account.models",
        "description": "account.models",
        "peekOfCode": "def create_student_with_user(\n    first_name, last_name, year_admitted,\n    password=None, email=None, **student_data):\n    \"\"\"Create both User account AND Student profile\"\"\"\n    from school.models import Student\n    from account.models import User\n    if not password:\n        password = generate_random_password()\n    student = Student(\n        first_name=first_name,",
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "create_teacher_with_user",
        "kind": 2,
        "importPath": "account.models",
        "description": "account.models",
        "peekOfCode": "def create_teacher_with_user(\n    first_name, last_name, date_of_employment,\n    password=None, email=None, is_admin=False, **teacher_data\n):\n    \"\"\"Create both User account AND Teacher profile\"\"\"\n    from account.models import User\n    if not password:\n        password = generate_random_password()\n    teacher = Teacher(\n        first_name=first_name,",
        "detail": "account.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "account.urls",
        "description": "account.urls",
        "peekOfCode": "app_name = 'account'\nurlpatterns = [\n    path('login/', views.CustomLoginView.as_view(), name='login'),\n    path('logout/', views.CustomLogoutView.as_view(), name='logout'),\n    path('profile/', views.profile_view, name='profile'),\n    path('change-password/', views.change_password_view, name='change_password'),\n]",
        "detail": "account.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "account.urls",
        "description": "account.urls",
        "peekOfCode": "urlpatterns = [\n    path('login/', views.CustomLoginView.as_view(), name='login'),\n    path('logout/', views.CustomLogoutView.as_view(), name='logout'),\n    path('profile/', views.profile_view, name='profile'),\n    path('change-password/', views.change_password_view, name='change_password'),\n]",
        "detail": "account.urls",
        "documentation": {}
    },
    {
        "label": "CustomLoginView",
        "kind": 6,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "class CustomLoginView(LoginView):\n    \"\"\"Custom login view with enhanced functionality\"\"\"\n    form_class = CustomLoginForm\n    template_name = 'auth/login.html'\n    redirect_authenticated_user = True\n    def get_success_url(self):\n        \"\"\"Redirect based on user type\"\"\"\n        user = self.request.user\n        if user.is_superuser or user.is_admin:\n            return reverse_lazy('admin:admin_dashboard')",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "CustomLogoutView",
        "kind": 6,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "class CustomLogoutView(LogoutView):\n    \"\"\"Custom logout view\"\"\"\n    next_page = 'accounts:login'\n    def dispatch(self, request, *args, **kwargs):\n        if request.user.is_authenticated:\n            messages.success(request, 'You have been logged out successfully.')\n        return super().dispatch(request, *args, **kwargs)\n@csrf_protect\n@never_cache\ndef login_view(request):",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "login_view",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def login_view(request):\n    \"\"\"Alternative function-based login view\"\"\"\n    if request.user.is_authenticated:\n        return redirect('core:dashboard')\n    if request.method == 'POST':\n        form = CustomLoginForm(request, data=request.POST)\n        if form.is_valid():\n            user = form.get_user()\n            login(request, user)\n            messages.success(",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "logout_view",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def logout_view(request):\n    \"\"\"Function-based logout view\"\"\"\n    logout(request)\n    messages.success(request, 'You have been logged out successfully.')\n    return redirect('accounts:login')\n@login_required\ndef profile_view(request):\n    \"\"\"User profile view\"\"\"\n    user = request.user\n    profile = user.get_profile()",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "profile_view",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def profile_view(request):\n    \"\"\"User profile view\"\"\"\n    user = request.user\n    profile = user.get_profile()\n    context = {\n        'user': user,\n        'profile': profile,\n        'title': 'My Profile'\n    }\n    return render(request, 'auth/profile.html', context)",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "change_password_view",
        "kind": 2,
        "importPath": "account.views",
        "description": "account.views",
        "peekOfCode": "def change_password_view(request):\n    \"\"\"Change password view\"\"\"\n    if request.method == 'POST':\n        current_password = request.POST.get('current_password')\n        new_password = request.POST.get('new_password')\n        confirm_password = request.POST.get('confirm_password')\n        user = request.user\n        if not user.check_password(current_password):\n            messages.error(request, 'Current password is incorrect.')\n        elif new_password != confirm_password:",
        "detail": "account.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "app.asgi",
        "description": "app.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "app.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-gq$h$dr&__gg$j2$6hlinofq9(c=ydk&62a53jir879dm+kvx('\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['localhost', '127.0.0.1']\n# Application definition\nDJANGO_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-gq$h$dr&__gg$j2$6hlinofq9(c=ydk&62a53jir879dm+kvx('\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['localhost', '127.0.0.1']\n# Application definition\nDJANGO_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['localhost', '127.0.0.1']\n# Application definition\nDJANGO_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['localhost', '127.0.0.1']\n# Application definition\nDJANGO_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "DJANGO_APPS",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "DJANGO_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\nLOCAL_APPS = [\n    'account.apps.AccountConfig',",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "LOCAL_APPS",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "LOCAL_APPS = [\n    'account.apps.AccountConfig',\n    'school.apps.SchoolConfig',\n    'core.apps.CoreConfig',\n    'student.apps.StudentConfig',\n]\nTHIRD_PARTY_APPS = [\n    # Add third party apps here if needed\n]\nINSTALLED_APPS = DJANGO_APPS + LOCAL_APPS + THIRD_PARTY_APPS",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "THIRD_PARTY_APPS",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "THIRD_PARTY_APPS = [\n    # Add third party apps here if needed\n]\nINSTALLED_APPS = DJANGO_APPS + LOCAL_APPS + THIRD_PARTY_APPS\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "INSTALLED_APPS = DJANGO_APPS + LOCAL_APPS + THIRD_PARTY_APPS\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'app.urls'",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "ROOT_URLCONF = 'app.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "WSGI_APPLICATION = 'app.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'HOST': os.environ.get('DB_HOST'),\n        'NAME': os.environ.get('DB_NAME'),\n        'USER': os.environ.get('DB_USER'),\n        'PASSWORD': os.environ.get('DB_PASS')",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'HOST': os.environ.get('DB_HOST'),\n        'NAME': os.environ.get('DB_NAME'),\n        'USER': os.environ.get('DB_USER'),\n        'PASSWORD': os.environ.get('DB_PASS')\n    }\n}\nAUTH_USER_MODEL = 'account.User'",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'account.User'\n# Password validation\n# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'Africa/Accra'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    BASE_DIR / 'static',\n]\nSTATIC_ROOT = BASE_DIR / 'staticfiles'",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "TIME_ZONE = 'Africa/Accra'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    BASE_DIR / 'static',\n]\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\n# Media files",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    BASE_DIR / 'static',\n]\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\n# Media files\nMEDIA_URL = '/media/'",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    BASE_DIR / 'static',\n]\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\n# Media files\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    BASE_DIR / 'static',\n]\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\n# Media files\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    BASE_DIR / 'static',\n]\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\n# Media files\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Login URLs",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "STATIC_ROOT = BASE_DIR / 'staticfiles'\n# Media files\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Login URLs\nLOGIN_URL = 'account:login'\nLOGIN_REDIRECT_URL = 'core:dashboard'\nLOGOUT_REDIRECT_URL = 'account:login'",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Login URLs\nLOGIN_URL = 'account:login'\nLOGIN_REDIRECT_URL = 'core:dashboard'\nLOGOUT_REDIRECT_URL = 'account:login'\n# Messages\nMESSAGE_TAGS = {",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "MEDIA_ROOT = BASE_DIR / 'media'\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Login URLs\nLOGIN_URL = 'account:login'\nLOGIN_REDIRECT_URL = 'core:dashboard'\nLOGOUT_REDIRECT_URL = 'account:login'\n# Messages\nMESSAGE_TAGS = {\n    messages.DEBUG: 'debug',",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Login URLs\nLOGIN_URL = 'account:login'\nLOGIN_REDIRECT_URL = 'core:dashboard'\nLOGOUT_REDIRECT_URL = 'account:login'\n# Messages\nMESSAGE_TAGS = {\n    messages.DEBUG: 'debug',\n    messages.INFO: 'info',\n    messages.SUCCESS: 'success',",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_URL",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "LOGIN_URL = 'account:login'\nLOGIN_REDIRECT_URL = 'core:dashboard'\nLOGOUT_REDIRECT_URL = 'account:login'\n# Messages\nMESSAGE_TAGS = {\n    messages.DEBUG: 'debug',\n    messages.INFO: 'info',\n    messages.SUCCESS: 'success',\n    messages.WARNING: 'warning',\n    messages.ERROR: 'danger',",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "LOGIN_REDIRECT_URL",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "LOGIN_REDIRECT_URL = 'core:dashboard'\nLOGOUT_REDIRECT_URL = 'account:login'\n# Messages\nMESSAGE_TAGS = {\n    messages.DEBUG: 'debug',\n    messages.INFO: 'info',\n    messages.SUCCESS: 'success',\n    messages.WARNING: 'warning',\n    messages.ERROR: 'danger',\n}",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "LOGOUT_REDIRECT_URL",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "LOGOUT_REDIRECT_URL = 'account:login'\n# Messages\nMESSAGE_TAGS = {\n    messages.DEBUG: 'debug',\n    messages.INFO: 'info',\n    messages.SUCCESS: 'success',\n    messages.WARNING: 'warning',\n    messages.ERROR: 'danger',\n}\n# School Configuration",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "MESSAGE_TAGS",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "MESSAGE_TAGS = {\n    messages.DEBUG: 'debug',\n    messages.INFO: 'info',\n    messages.SUCCESS: 'success',\n    messages.WARNING: 'warning',\n    messages.ERROR: 'danger',\n}\n# School Configuration\nSCHOOL_SETTINGS = {\n    'DEFAULT_ACADEMIC_YEAR_START_MONTH': 9,  # September",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "SCHOOL_SETTINGS",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "SCHOOL_SETTINGS = {\n    'DEFAULT_ACADEMIC_YEAR_START_MONTH': 9,  # September\n    'DEFAULT_TERMS_PER_YEAR': 3,\n    'DEFAULT_CLASS_CAPACITY': 45,\n}\n# Security Settings (for production)\nif not DEBUG:\n    SECURE_BROWSER_XSS_FILTER = True\n    SECURE_CONTENT_TYPE_NOSNIFF = True\n    SECURE_HSTS_INCLUDE_SUBDOMAINS = True",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "STUDENT_PAGINATION",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "STUDENT_PAGINATION = 20\nSTUDENT_MAX_UPLOAD_SIZE = 5 * 1024 * 1024  # 5MB\nSTUDENT_ALLOWED_EXTENSIONS = ['.csv']",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "STUDENT_MAX_UPLOAD_SIZE",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "STUDENT_MAX_UPLOAD_SIZE = 5 * 1024 * 1024  # 5MB\nSTUDENT_ALLOWED_EXTENSIONS = ['.csv']",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "STUDENT_ALLOWED_EXTENSIONS",
        "kind": 5,
        "importPath": "app.settings",
        "description": "app.settings",
        "peekOfCode": "STUDENT_ALLOWED_EXTENSIONS = ['.csv']",
        "detail": "app.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "app.urls",
        "description": "app.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', include('core.urls.admin_urls')),\n    path('student/', include('core.urls.student_urls')),\n    path('teacher/', include('core.urls.teacher_urls')),\n    path('', include('account.urls')),\n    path('', home_view, name='home'),\n]\n# Serve media files in development\nif settings.DEBUG:\n    urlpatterns += static(",
        "detail": "app.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "app.wsgi",
        "description": "app.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "app.wsgi",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "core.management.commands.create_demo_data",
        "description": "core.management.commands.create_demo_data",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Create demo data for testing'\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--students',\n            type=int,\n            default=50,\n            help='Number of students to create',\n        )\n        parser.add_argument(",
        "detail": "core.management.commands.create_demo_data",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "core.management.commands.create_sample_students",
        "description": "core.management.commands.create_sample_students",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Create sample students for testing purposes'\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--count',\n            type=int,\n            default=50,\n            help='Number of students to create (default: 50)'\n        )\n        parser.add_argument(",
        "detail": "core.management.commands.create_sample_students",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "core.management.commands.create_sample_students",
        "description": "core.management.commands.create_sample_students",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Promote students from one class to another'\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--from-class',\n            type=str,\n            required=True,\n            help='Source class name or ID'\n        )\n        parser.add_argument(",
        "detail": "core.management.commands.create_sample_students",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "core.management.commands.create_sample_students",
        "description": "core.management.commands.create_sample_students",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Export students to CSV file'\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--output',\n            type=str,\n            default=None,\n            help='Output file path (default: students_export_YYYYMMDD.csv)'\n        )\n        parser.add_argument(",
        "detail": "core.management.commands.create_sample_students",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "core.management.commands.create_sample_students",
        "description": "core.management.commands.create_sample_students",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Fix missing user accounts for students'\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--dry-run',\n            action='store_true',\n            help='Show what would be fixed without making changes'\n        )\n        parser.add_argument(\n            '--create-missing',",
        "detail": "core.management.commands.create_sample_students",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "core.management.commands.create_superuser",
        "description": "core.management.commands.create_superuser",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Create a superuser account'\n    def add_arguments(self, parser):\n        parser.add_argument('--username', required=True,\n                            help='Username for superuser')\n        parser.add_argument('--email', help='Email for superuser')\n        parser.add_argument('--password', help='Password for superuser')\n    def handle(self, *args, **options):\n        username = options['username']\n        email = options.get('email', '')",
        "detail": "core.management.commands.create_superuser",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "core.management.commands.setup_school",
        "description": "core.management.commands.setup_school",
        "peekOfCode": "class Command(BaseCommand):\n    help = 'Set up initial school data'\n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--school-name',\n            default='T. I. Ahmadiyya SHS',\n            help='School name',\n        )\n        parser.add_argument(\n            '--school-code',",
        "detail": "core.management.commands.setup_school",
        "documentation": {}
    },
    {
        "label": "school_theme_css",
        "kind": 2,
        "importPath": "core.templatetags.school_theme",
        "description": "core.templatetags.school_theme",
        "peekOfCode": "def school_theme_css():\n    \"\"\"Include school theme CSS variables\"\"\"\n    return {}\n@register.simple_tag\ndef school_gradient(direction=\"135deg\"):\n    \"\"\"Generate school gradient\"\"\"\n    return mark_safe(\n        f\"linear-gradient({direction}, var(--school-primary), var(--school-secondary))\"\n    )\n@register.simple_tag",
        "detail": "core.templatetags.school_theme",
        "documentation": {}
    },
    {
        "label": "school_gradient",
        "kind": 2,
        "importPath": "core.templatetags.school_theme",
        "description": "core.templatetags.school_theme",
        "peekOfCode": "def school_gradient(direction=\"135deg\"):\n    \"\"\"Generate school gradient\"\"\"\n    return mark_safe(\n        f\"linear-gradient({direction}, var(--school-primary), var(--school-secondary))\"\n    )\n@register.simple_tag\ndef school_color_rgb(color_name):\n    \"\"\"Get school color as RGB values\"\"\"\n    color_map = {\n        'primary': 'var(--school-primary-rgb)',",
        "detail": "core.templatetags.school_theme",
        "documentation": {}
    },
    {
        "label": "school_color_rgb",
        "kind": 2,
        "importPath": "core.templatetags.school_theme",
        "description": "core.templatetags.school_theme",
        "peekOfCode": "def school_color_rgb(color_name):\n    \"\"\"Get school color as RGB values\"\"\"\n    color_map = {\n        'primary': 'var(--school-primary-rgb)',\n        'secondary': 'var(--school-secondary-rgb)',\n    }\n    return mark_safe(color_map.get(color_name, 'var(--school-primary-rgb)'))\n@register.filter\ndef with_school_color(element_class, color_type=\"primary\"):\n    \"\"\"Add school color to CSS class\"\"\"",
        "detail": "core.templatetags.school_theme",
        "documentation": {}
    },
    {
        "label": "with_school_color",
        "kind": 2,
        "importPath": "core.templatetags.school_theme",
        "description": "core.templatetags.school_theme",
        "peekOfCode": "def with_school_color(element_class, color_type=\"primary\"):\n    \"\"\"Add school color to CSS class\"\"\"\n    if color_type == \"primary\":\n        return mark_safe(f\"{element_class} school-primary-bg\")\n    elif color_type == \"secondary\":\n        return mark_safe(f\"{element_class} school-secondary-bg\")\n    return element_class",
        "detail": "core.templatetags.school_theme",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "core.templatetags.school_theme",
        "description": "core.templatetags.school_theme",
        "peekOfCode": "register = template.Library()\n@register.inclusion_tag('school/theme_colors.html')\ndef school_theme_css():\n    \"\"\"Include school theme CSS variables\"\"\"\n    return {}\n@register.simple_tag\ndef school_gradient(direction=\"135deg\"):\n    \"\"\"Generate school gradient\"\"\"\n    return mark_safe(\n        f\"linear-gradient({direction}, var(--school-primary), var(--school-secondary))\"",
        "detail": "core.templatetags.school_theme",
        "documentation": {}
    },
    {
        "label": "student_avatar_initials",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def student_avatar_initials(student):\n    \"\"\"Get student initials for avatar display\"\"\"\n    try:\n        if hasattr(student, 'first_name') and hasattr(student, 'last_name'):\n            first_initial = student.first_name[0].upper(\n            ) if student.first_name else ''\n            last_initial = student.last_name[0].upper(\n            ) if student.last_name else ''\n            return f\"{first_initial}{last_initial}\"\n    except (AttributeError, IndexError):",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "student_status_badge",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def student_status_badge(is_active):\n    \"\"\"Render student status as a colored badge\"\"\"\n    if is_active:\n        return format_html('<span class=\"badge badge-success\"><i class=\"fas fa-check me-1\"></i>Active</span>')\n    else:\n        return format_html('<span class=\"badge bg-danger\"><i class=\"fas fa-times me-1\"></i>Inactive</span>')\n@register.filter\ndef student_class_display(student):\n    \"\"\"Display student's class with programme information\"\"\"\n    try:",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "student_class_display",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def student_class_display(student):\n    \"\"\"Display student's class with programme information\"\"\"\n    try:\n        if not hasattr(student, 'current_class') or not student.current_class:\n            return format_html('<span class=\"text-muted\">No Class Assigned</span>')\n        class_name = str(student.current_class)\n        if hasattr(student.current_class, 'programme') and student.current_class.programme:\n            return format_html(\n                '<span class=\"badge bg-primary\">{}</span><br><small class=\"text-muted\">{}</small>',\n                class_name, student.current_class.programme.name",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "contact_display",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def contact_display(student):\n    \"\"\"Display primary contact for student (email or phone)\"\"\"\n    try:\n        if hasattr(student, 'email') and student.email:\n            return format_html('<a href=\"mailto:{}\" class=\"text-decoration-none\"><i class=\"fas fa-envelope me-1\"></i>{}</a>',\n                               student.email, student.email)\n        elif hasattr(student, 'phone') and student.phone:\n            return format_html('<a href=\"tel:{}\" class=\"text-decoration-none\"><i class=\"fas fa-phone me-1\"></i>{}</a>',\n                               student.phone, student.phone)\n        elif hasattr(student, 'guardian_phone') and student.guardian_phone:",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "age_from_birthdate",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def age_from_birthdate(birth_date):\n    \"\"\"Calculate age from birth date\"\"\"\n    try:\n        if not birth_date:\n            return \"Unknown\"\n        today = date.today()\n        age = today.year - birth_date.year - \\\n            ((today.month, today.day) < (birth_date.month, birth_date.day))\n        return f\"{age} years\"\n    except (AttributeError, TypeError, ValueError):",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "guardian_contact_display",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def guardian_contact_display(student):\n    \"\"\"Display guardian contact with relationship\"\"\"\n    try:\n        if not hasattr(student, 'guardian_name') or not student.guardian_name:\n            return format_html('<span class=\"text-muted\">Not provided</span>')\n        contact_parts = [student.guardian_name]\n        if hasattr(student, 'relationship_to_guardian') and student.relationship_to_guardian:\n            contact_parts.append(f\"({student.relationship_to_guardian})\")\n        contact_html = ' '.join(contact_parts)\n        if hasattr(student, 'guardian_phone') and student.guardian_phone:",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "house_color_badge",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def house_color_badge(house):\n    \"\"\"Display house name with its color\"\"\"\n    try:\n        if not house:\n            return format_html('<span class=\"text-muted\">No House</span>')\n        color = getattr(house, 'color', '#6c757d')\n        return format_html(\n            '<span class=\"badge\" style=\"background-color: {}; color: white;\"><i class=\"fas fa-home me-1\"></i>{}</span>',\n            color, house.name\n        )",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "student_avatar_color",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def student_avatar_color(student):\n    \"\"\"Generate consistent color for student avatar based on name\"\"\"\n    try:\n        if not student:\n            return \"#6c757d\"\n        # Generate color based on student name hash\n        name = f\"{getattr(student, 'first_name', '')}{getattr(student, 'last_name', '')}\"\n        if not name:\n            return \"#6c757d\"\n        colors = [",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "format_phone_number",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def format_phone_number(phone):\n    \"\"\"Format phone number for display\"\"\"\n    try:\n        if not phone:\n            return \"\"\n        # Remove any non-digit characters\n        digits = ''.join(filter(str.isdigit, str(phone)))\n        # Format Ghana phone numbers\n        if len(digits) == 10 and digits.startswith('0'):\n            return f\"{digits[:4]}-{digits[4:7]}-{digits[7:]}\"",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "days_since_created",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def days_since_created(student):\n    \"\"\"Calculate days since student was created\"\"\"\n    try:\n        if not hasattr(student, 'created_at') or not student.created_at:\n            return \"Unknown\"\n        delta = timezone.now() - student.created_at\n        days = delta.days\n        if days == 0:\n            return \"Today\"\n        elif days == 1:",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "student_progress_percentage",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def student_progress_percentage(student):\n    \"\"\"Calculate completion percentage of student profile\"\"\"\n    try:\n        if not student:\n            return 0\n        fields_to_check = [\n            'first_name', 'last_name', 'email', 'phone', 'address',\n            'current_class', 'house', 'guardian_name', 'guardian_phone',\n            'date_of_birth', 'ghana_card_number'\n        ]",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "student_age_group",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def student_age_group(student):\n    \"\"\"Categorize student by age group\"\"\"\n    try:\n        if not hasattr(student, 'date_of_birth') or not student.date_of_birth:\n            return \"Unknown\"\n        today = date.today()\n        age = today.year - student.date_of_birth.year\n        if age <= 15:\n            return \"Junior (≤15)\"\n        elif age <= 17:",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "student_academic_year",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def student_academic_year(student):\n    \"\"\"Get student's current academic year\"\"\"\n    try:\n        if not hasattr(student, 'year_admitted') or not student.year_admitted:\n            return \"Unknown\"\n        current_year = timezone.now().year\n        years_in_school = current_year - student.year_admitted\n        if years_in_school < 0:\n            return \"Future Student\"\n        elif years_in_school == 0:",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "can_edit_student",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def can_edit_student(user, student):\n    \"\"\"Check if user can edit the student\"\"\"\n    try:\n        if not user or not user.is_authenticated:\n            return False\n        if user.is_admin or user.is_superuser:\n            return True\n        if user.is_teacher:\n            return True\n        # Students can only edit their own profile (limited fields)",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "can_delete_student",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def can_delete_student(user, student):\n    \"\"\"Check if user can delete/deactivate the student\"\"\"\n    try:\n        if not user or not user.is_authenticated:\n            return False\n        return user.is_admin or user.is_superuser\n    except (AttributeError, TypeError):\n        return False\n@register.filter\ndef student_full_contact(student):",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "student_full_contact",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def student_full_contact(student):\n    \"\"\"Get full contact information formatted\"\"\"\n    try:\n        contacts = []\n        if hasattr(student, 'email') and student.email:\n            contacts.append(\n                f'<i class=\"fas fa-envelope me-1\"></i>{student.email}')\n        if hasattr(student, 'phone') and student.phone:\n            contacts.append(\n                f'<i class=\"fas fa-phone me-1\"></i>{student.phone}')",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "student_detail_url",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def student_detail_url(student):\n    \"\"\"Generate student detail URL\"\"\"\n    try:\n        return reverse('student:student_detail', kwargs={'pk': student.pk})\n    except (AttributeError, TypeError):\n        return '#'\n@register.simple_tag\ndef student_edit_url(student):\n    \"\"\"Generate student edit URL\"\"\"\n    try:",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "student_edit_url",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def student_edit_url(student):\n    \"\"\"Generate student edit URL\"\"\"\n    try:\n        return reverse('student:student_edit', kwargs={'pk': student.pk})\n    except (AttributeError, TypeError):\n        return '#'\n@register.simple_tag\ndef student_delete_url(student):\n    \"\"\"Generate student delete URL\"\"\"\n    try:",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "student_delete_url",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def student_delete_url(student):\n    \"\"\"Generate student delete URL\"\"\"\n    try:\n        return reverse('student:student_delete', kwargs={'pk': student.pk})\n    except (AttributeError, TypeError):\n        return '#'\n@register.simple_tag\ndef student_count_by_class(class_obj):\n    \"\"\"Get student count for a specific class\"\"\"\n    try:",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "student_count_by_class",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def student_count_by_class(class_obj):\n    \"\"\"Get student count for a specific class\"\"\"\n    try:\n        if not class_obj:\n            return 0\n        return Student.objects.filter(current_class=class_obj, is_active=True).count()\n    except (AttributeError, TypeError):\n        return 0\n@register.simple_tag\ndef student_count_by_house(house_obj):",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "student_count_by_house",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def student_count_by_house(house_obj):\n    \"\"\"Get student count for a specific house\"\"\"\n    try:\n        if not house_obj:\n            return 0\n        return Student.objects.filter(house=house_obj, is_active=True).count()\n    except (AttributeError, TypeError):\n        return 0\n@register.simple_tag\ndef get_recent_students(limit=5):",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "get_recent_students",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def get_recent_students(limit=5):\n    \"\"\"Get recently added students\"\"\"\n    try:\n        return Student.objects.filter(is_active=True).select_related(\n            'current_class', 'house', 'current_class__programme'\n        ).order_by('-created_at')[:limit]\n    except (AttributeError, TypeError):\n        return Student.objects.none()\n@register.simple_tag\ndef get_students_without_class():",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "get_students_without_class",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def get_students_without_class():\n    \"\"\"Get count of students without assigned class\"\"\"\n    try:\n        return Student.objects.filter(is_active=True, current_class__isnull=True).count()\n    except (AttributeError, TypeError):\n        return 0\n@register.simple_tag\ndef get_students_without_house():\n    \"\"\"Get count of students without assigned house\"\"\"\n    try:",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "get_students_without_house",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def get_students_without_house():\n    \"\"\"Get count of students without assigned house\"\"\"\n    try:\n        return Student.objects.filter(is_active=True, house__isnull=True).count()\n    except (AttributeError, TypeError):\n        return 0\n@register.simple_tag\ndef students_by_gender_chart_data():\n    \"\"\"Generate chart data for students by gender\"\"\"\n    try:",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "students_by_gender_chart_data",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def students_by_gender_chart_data():\n    \"\"\"Generate chart data for students by gender\"\"\"\n    try:\n        male_count = Student.objects.filter(is_active=True, gender='M').count()\n        female_count = Student.objects.filter(\n            is_active=True, gender='F').count()\n        return mark_safe(json.dumps({\n            'labels': ['Male', 'Female'],\n            'data': [male_count, female_count],\n            'backgroundColor': ['#36A2EB', '#FF6384']",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "students_by_level_chart_data",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def students_by_level_chart_data():\n    \"\"\"Generate chart data for students by level\"\"\"\n    try:\n        levels_data = Student.objects.filter(is_active=True).values(\n            'current_class__level'\n        ).annotate(count=Count('id')).order_by('current_class__level')\n        labels = []\n        data = []\n        for item in levels_data:\n            if item['current_class__level']:",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "students_by_house_chart_data",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def students_by_house_chart_data():\n    \"\"\"Generate chart data for students by house\"\"\"\n    try:\n        houses_data = Student.objects.filter(is_active=True).values(\n            'house__name'\n        ).annotate(count=Count('id')).order_by('house__name')\n        labels = []\n        data = []\n        for item in houses_data:\n            labels.append(item['house__name'] or 'No House')",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "student_bulk_action_url",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def student_bulk_action_url(action):\n    \"\"\"Generate URL for bulk student actions\"\"\"\n    urls = {\n        'export': 'student:bulk_export',\n        'promote': 'student:promotion',\n        'deactivate': 'student:bulk_deactivate',\n    }\n    try:\n        url_name = urls.get(action)\n        if url_name:",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "total_students_count",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def total_students_count():\n    \"\"\"Get total active students count\"\"\"\n    try:\n        return Student.objects.filter(is_active=True).count()\n    except:\n        return 0\n@register.simple_tag\ndef inactive_students_count():\n    \"\"\"Get total inactive students count\"\"\"\n    try:",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "inactive_students_count",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def inactive_students_count():\n    \"\"\"Get total inactive students count\"\"\"\n    try:\n        return Student.objects.filter(is_active=False).count()\n    except:\n        return 0\n@register.simple_tag\ndef students_by_programme_data():\n    \"\"\"Get students grouped by programme\"\"\"\n    try:",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "students_by_programme_data",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def students_by_programme_data():\n    \"\"\"Get students grouped by programme\"\"\"\n    try:\n        return Student.objects.filter(is_active=True).values(\n            'current_class__programme__name'\n        ).annotate(count=Count('id')).order_by('current_class__programme__name')\n    except:\n        return []\n@register.simple_tag\ndef students_admitted_this_year():",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "students_admitted_this_year",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def students_admitted_this_year():\n    \"\"\"Get count of students admitted this academic year\"\"\"\n    try:\n        current_year = timezone.now().year\n        return Student.objects.filter(\n            is_active=True,\n            year_admitted=current_year\n        ).count()\n    except:\n        return 0",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "student_card",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def student_card(student, show_actions=True, card_class=\"\"):\n    \"\"\"Render a reusable student card component\"\"\"\n    return {\n        'student': student,\n        'show_actions': show_actions,\n        'card_class': card_class\n    }\n@register.inclusion_tag('student/tags/student_table_row.html')\ndef student_table_row(student, show_checkbox=True):\n    \"\"\"Render a student table row component\"\"\"",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "student_table_row",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def student_table_row(student, show_checkbox=True):\n    \"\"\"Render a student table row component\"\"\"\n    return {\n        'student': student,\n        'show_checkbox': show_checkbox\n    }\n@register.inclusion_tag('student/tags/student_stats_widget.html')\ndef student_stats_widget():\n    \"\"\"Render student statistics widget\"\"\"\n    try:",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "student_stats_widget",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def student_stats_widget():\n    \"\"\"Render student statistics widget\"\"\"\n    try:\n        total_students = Student.objects.filter(is_active=True).count()\n        male_students = Student.objects.filter(\n            is_active=True, gender='M').count()\n        female_students = Student.objects.filter(\n            is_active=True, gender='F').count()\n        houses_count = House.objects.count()\n        classes_count = Class.objects.count()",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "student_search_form",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def student_search_form(request, classes=None, houses=None, programmes=None):\n    \"\"\"Render student search form component\"\"\"\n    try:\n        if not classes:\n            classes = Class.objects.all().order_by('level', 'name')\n        if not houses:\n            houses = House.objects.all().order_by('name')\n        if not programmes:\n            programmes = Programme.objects.all().order_by('name')\n        return {",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "student_bulk_actions",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def student_bulk_actions():\n    \"\"\"Render bulk actions toolbar\"\"\"\n    return {}\n@register.inclusion_tag('student/tags/student_filter_sidebar.html')\ndef student_filter_sidebar(request):\n    \"\"\"Render student filter sidebar\"\"\"\n    try:\n        classes = Class.objects.all().order_by('level', 'name')\n        houses = House.objects.all().order_by('name')\n        programmes = Programme.objects.all().order_by('name')",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "student_filter_sidebar",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def student_filter_sidebar(request):\n    \"\"\"Render student filter sidebar\"\"\"\n    try:\n        classes = Class.objects.all().order_by('level', 'name')\n        houses = House.objects.all().order_by('name')\n        programmes = Programme.objects.all().order_by('name')\n        years = Student.objects.values_list(\n            'year_admitted', flat=True\n        ).distinct().order_by('-year_admitted')\n        return {",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "query_string",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def query_string(context, **kwargs):\n    \"\"\"Generate query string for pagination while preserving filters\"\"\"\n    try:\n        request = context.get('request')\n        if not request:\n            return \"\"\n        query_dict = request.GET.copy()\n        for key, value in kwargs.items():\n            if value is None:\n                query_dict.pop(key, None)",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "current_url_with_params",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def current_url_with_params(context, **kwargs):\n    \"\"\"Get current URL with additional parameters\"\"\"\n    try:\n        request = context.get('request')\n        if not request:\n            return \"\"\n        query_dict = request.GET.copy()\n        query_dict.update(kwargs)\n        return f\"{request.path}?{query_dict.urlencode()}\" if query_dict else request.path\n    except:",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "get_student_statistics",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def get_student_statistics():\n    \"\"\"Get comprehensive student statistics\"\"\"\n    try:\n        return {\n            'total_active': Student.objects.filter(is_active=True).count(),\n            'total_inactive': Student.objects.filter(is_active=False).count(),\n            'male_count': Student.objects.filter(is_active=True, gender='M').count(),\n            'female_count': Student.objects.filter(is_active=True, gender='F').count(),\n            'without_class': Student.objects.filter(is_active=True, current_class__isnull=True).count(),\n            'without_house': Student.objects.filter(is_active=True, house__isnull=True).count(),",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "get_class_distribution",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def get_class_distribution():\n    \"\"\"Get student distribution across classes\"\"\"\n    try:\n        return Student.objects.filter(is_active=True).values(\n            'current_class__name',\n            'current_class__level',\n            'current_class__programme__name'\n        ).annotate(\n            student_count=Count('id')\n        ).order_by('current_class__level', 'current_class__name')",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "safe_getattr",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def safe_getattr(obj, attr, default=None):\n    \"\"\"Safely get attribute from object\"\"\"\n    try:\n        return getattr(obj, attr, default)\n    except (AttributeError, TypeError):\n        return default\ndef safe_format_html(template, *args, **kwargs):\n    \"\"\"Safely format HTML\"\"\"\n    try:\n        return format_html(template, *args, **kwargs)",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "safe_format_html",
        "kind": 2,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "def safe_format_html(template, *args, **kwargs):\n    \"\"\"Safely format HTML\"\"\"\n    try:\n        return format_html(template, *args, **kwargs)\n    except:\n        return mark_safe('<span class=\"text-muted\">Error</span>')",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "core.templatetags.student_extras",
        "description": "core.templatetags.student_extras",
        "peekOfCode": "register = template.Library()\n# =============================================================================\n# FILTERS\n# =============================================================================\n@register.filter\ndef student_avatar_initials(student):\n    \"\"\"Get student initials for avatar display\"\"\"\n    try:\n        if hasattr(student, 'first_name') and hasattr(student, 'last_name'):\n            first_initial = student.first_name[0].upper(",
        "detail": "core.templatetags.student_extras",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "core.urls.admin_urls",
        "description": "core.urls.admin_urls",
        "peekOfCode": "app_name = 'admin'\nurlpatterns = [\n    # Admin Dashboard\n    path('', views.admin_dashboard, name='admin_dashboard'),\n    path('configuration/', school_views.school_configuration_view, name='configuration'),\n    path('setup/', school_views.quick_setup_view, name='quick_setup'),\n    path('setup-school/', school_views.setup_school_view, name='setup_school'),\n     # Academic Years\n    path('academic-years/', school_views.AcademicYearListView.as_view(), name='academic_years'),\n    path('academic-years/create/', school_views.AcademicYearCreateView.as_view(), name='academic_year_create'),",
        "detail": "core.urls.admin_urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "core.urls.admin_urls",
        "description": "core.urls.admin_urls",
        "peekOfCode": "urlpatterns = [\n    # Admin Dashboard\n    path('', views.admin_dashboard, name='admin_dashboard'),\n    path('configuration/', school_views.school_configuration_view, name='configuration'),\n    path('setup/', school_views.quick_setup_view, name='quick_setup'),\n    path('setup-school/', school_views.setup_school_view, name='setup_school'),\n     # Academic Years\n    path('academic-years/', school_views.AcademicYearListView.as_view(), name='academic_years'),\n    path('academic-years/create/', school_views.AcademicYearCreateView.as_view(), name='academic_year_create'),\n    path('academic-years/<int:pk>/edit/', school_views.AcademicYearUpdateView.as_view(), name='academic_year_edit'),",
        "detail": "core.urls.admin_urls",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "core.urls.student_urls",
        "description": "core.urls.student_urls",
        "peekOfCode": "app_name = 'student'\nurlpatterns = [\n    path('', core_views.student_dashboard, name='student_dashboard'),\n]",
        "detail": "core.urls.student_urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "core.urls.student_urls",
        "description": "core.urls.student_urls",
        "peekOfCode": "urlpatterns = [\n    path('', core_views.student_dashboard, name='student_dashboard'),\n]",
        "detail": "core.urls.student_urls",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "core.urls.teacher_urls",
        "description": "core.urls.teacher_urls",
        "peekOfCode": "app_name = 'teacher'\nurlpatterns = [\n    path('', core_views.teacher_dashboard, name='teacher_dashboard'),\n]",
        "detail": "core.urls.teacher_urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "core.urls.teacher_urls",
        "description": "core.urls.teacher_urls",
        "peekOfCode": "urlpatterns = [\n    path('', core_views.teacher_dashboard, name='teacher_dashboard'),\n]",
        "detail": "core.urls.teacher_urls",
        "documentation": {}
    },
    {
        "label": "CoreConfig",
        "kind": 6,
        "importPath": "core.apps",
        "description": "core.apps",
        "peekOfCode": "class CoreConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'core'",
        "detail": "core.apps",
        "documentation": {}
    },
    {
        "label": "school_context",
        "kind": 2,
        "importPath": "core.context_processors",
        "description": "core.context_processors",
        "peekOfCode": "def school_context(request):\n    \"\"\"Add school context to all templates\"\"\"\n    try:\n        school = School.get_current_school()\n        current_academic_year = AcademicYear.objects.filter(\n            is_current=True).first()\n        current_term = Term.objects.filter(is_current=True).first()\n        return {\n            'school': school,\n            'current_academic_year': current_academic_year,",
        "detail": "core.context_processors",
        "documentation": {}
    },
    {
        "label": "student_stats",
        "kind": 2,
        "importPath": "core.context_processors",
        "description": "core.context_processors",
        "peekOfCode": "def student_stats(request):\n    \"\"\"Add basic student statistics to template context\"\"\"\n    if request.user.is_authenticated and (request.user.is_admin or request.user.is_teacher):\n        return {\n            'total_students_count': Student.objects.filter(is_active=True).count(),\n            'inactive_students_count': Student.objects.filter(is_active=False).count(),\n        }\n    return {}\n@register.filter\ndef student_avatar_initials(student):",
        "detail": "core.context_processors",
        "documentation": {}
    },
    {
        "label": "student_avatar_initials",
        "kind": 2,
        "importPath": "core.context_processors",
        "description": "core.context_processors",
        "peekOfCode": "def student_avatar_initials(student):\n    \"\"\"Get student initials for avatar\"\"\"\n    if hasattr(student, 'first_name') and hasattr(student, 'last_name'):\n        return f\"{student.first_name[0].upper()}{student.last_name[0].upper()}\"\n    return \"ST\"\n@register.filter\ndef student_status_badge(is_active):\n    \"\"\"Render student status as a badge\"\"\"\n    if is_active:\n        return format_html('<span class=\"badge badge-success\">Active</span>')",
        "detail": "core.context_processors",
        "documentation": {}
    },
    {
        "label": "student_status_badge",
        "kind": 2,
        "importPath": "core.context_processors",
        "description": "core.context_processors",
        "peekOfCode": "def student_status_badge(is_active):\n    \"\"\"Render student status as a badge\"\"\"\n    if is_active:\n        return format_html('<span class=\"badge badge-success\">Active</span>')\n    else:\n        return format_html('<span class=\"badge bg-danger\">Inactive</span>')\n@register.filter\ndef student_class_display(student):\n    \"\"\"Display student's class with programme if available\"\"\"\n    if not student.current_class:",
        "detail": "core.context_processors",
        "documentation": {}
    },
    {
        "label": "student_class_display",
        "kind": 2,
        "importPath": "core.context_processors",
        "description": "core.context_processors",
        "peekOfCode": "def student_class_display(student):\n    \"\"\"Display student's class with programme if available\"\"\"\n    if not student.current_class:\n        return \"No Class\"\n    class_name = str(student.current_class)\n    if student.current_class.programme:\n        return f\"{class_name} ({student.current_class.programme.code})\"\n    return class_name\n@register.simple_tag\ndef student_detail_url(student):",
        "detail": "core.context_processors",
        "documentation": {}
    },
    {
        "label": "student_detail_url",
        "kind": 2,
        "importPath": "core.context_processors",
        "description": "core.context_processors",
        "peekOfCode": "def student_detail_url(student):\n    \"\"\"Generate student detail URL\"\"\"\n    return reverse('student:student_detail', kwargs={'pk': student.pk})\n@register.inclusion_tag('student/tags/student_card.html')\ndef student_card(student, show_actions=True):\n    \"\"\"Render a student card component\"\"\"\n    return {\n        'student': student,\n        'show_actions': show_actions\n    }",
        "detail": "core.context_processors",
        "documentation": {}
    },
    {
        "label": "student_card",
        "kind": 2,
        "importPath": "core.context_processors",
        "description": "core.context_processors",
        "peekOfCode": "def student_card(student, show_actions=True):\n    \"\"\"Render a student card component\"\"\"\n    return {\n        'student': student,\n        'show_actions': show_actions\n    }\n@register.filter\ndef contact_display(student):\n    \"\"\"Display primary contact for student\"\"\"\n    if student.email:",
        "detail": "core.context_processors",
        "documentation": {}
    },
    {
        "label": "contact_display",
        "kind": 2,
        "importPath": "core.context_processors",
        "description": "core.context_processors",
        "peekOfCode": "def contact_display(student):\n    \"\"\"Display primary contact for student\"\"\"\n    if student.email:\n        return student.email\n    elif student.phone:\n        return student.phone\n    elif student.guardian_phone:\n        return student.guardian_phone\n    return \"No contact\"\ndef school_theme(request):",
        "detail": "core.context_processors",
        "documentation": {}
    },
    {
        "label": "school_theme",
        "kind": 2,
        "importPath": "core.context_processors",
        "description": "core.context_processors",
        "peekOfCode": "def school_theme(request):\n    \"\"\"Add school configuration and theme colors to all templates\"\"\"\n    try:\n        school = School.get_current_school()\n        # Generate color variations from primary and secondary colors\n        theme_colors = generate_theme_colors(school.primary_color, school.secondary_color)\n        return {\n            'school': school,\n            'theme_colors': theme_colors,\n            'school_primary_color': school.primary_color,",
        "detail": "core.context_processors",
        "documentation": {}
    },
    {
        "label": "generate_theme_colors",
        "kind": 2,
        "importPath": "core.context_processors",
        "description": "core.context_processors",
        "peekOfCode": "def generate_theme_colors(primary_color, secondary_color):\n    \"\"\"Generate a complete color theme from primary and secondary colors\"\"\"\n    from .utils import ColorThemeGenerator\n    generator = ColorThemeGenerator(primary_color, secondary_color)\n    return {\n        'primary': primary_color,\n        'primary_light': generator.lighten_color(primary_color, 0.1),\n        'primary_dark': generator.darken_color(primary_color, 0.1),\n        'primary_rgb': generator.hex_to_rgb(primary_color),\n        'secondary': secondary_color,",
        "detail": "core.context_processors",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "core.context_processors",
        "description": "core.context_processors",
        "peekOfCode": "register = template.Library()\ndef school_context(request):\n    \"\"\"Add school context to all templates\"\"\"\n    try:\n        school = School.get_current_school()\n        current_academic_year = AcademicYear.objects.filter(\n            is_current=True).first()\n        current_term = Term.objects.filter(is_current=True).first()\n        return {\n            'school': school,",
        "detail": "core.context_processors",
        "documentation": {}
    },
    {
        "label": "admin_or_teacher_required",
        "kind": 2,
        "importPath": "core.decorators",
        "description": "core.decorators",
        "peekOfCode": "def admin_or_teacher_required(view_func):\n    \"\"\"Decorator to require admin or teacher permissions\"\"\"\n    @wraps(view_func)\n    @login_required\n    def _wrapped_view(request, *args, **kwargs):\n        if not (request.user.is_admin or request.user.is_teacher):\n            raise PermissionDenied(\n                \"You must be an admin or teacher to access this page.\")\n        return view_func(request, *args, **kwargs)\n    return _wrapped_view",
        "detail": "core.decorators",
        "documentation": {}
    },
    {
        "label": "admin_required",
        "kind": 2,
        "importPath": "core.decorators",
        "description": "core.decorators",
        "peekOfCode": "def admin_required(view_func):\n    \"\"\"Decorator to require admin permissions only\"\"\"\n    @wraps(view_func)\n    @login_required\n    def _wrapped_view(request, *args, **kwargs):\n        if not request.user.is_admin:\n            raise PermissionDenied(\"You must be an admin to access this page.\")\n        return view_func(request, *args, **kwargs)\n    return _wrapped_view",
        "detail": "core.decorators",
        "documentation": {}
    },
    {
        "label": "AdminRequiredMixin",
        "kind": 6,
        "importPath": "core.mixins",
        "description": "core.mixins",
        "peekOfCode": "class AdminRequiredMixin:\n    \"\"\"Mixin for views that require admin access\"\"\"\n    def dispatch(self, request, *args, **kwargs):\n        if not (request.user.is_authenticated and\n                (request.user.is_admin or request.user.is_superuser)):\n            from django.contrib.auth.views import redirect_to_login\n            return redirect_to_login(request.get_full_path())\n        return super().dispatch(request, *args, **kwargs)\nclass TeacherRequiredMixin:\n    \"\"\"Mixin for views that require teacher access\"\"\"",
        "detail": "core.mixins",
        "documentation": {}
    },
    {
        "label": "TeacherRequiredMixin",
        "kind": 6,
        "importPath": "core.mixins",
        "description": "core.mixins",
        "peekOfCode": "class TeacherRequiredMixin:\n    \"\"\"Mixin for views that require teacher access\"\"\"\n    def dispatch(self, request, *args, **kwargs):\n        if not (request.user.is_authenticated and\n                (request.user.is_teacher or request.user.is_admin or\n                 request.user.is_superuser)):\n            from django.contrib.auth.views import redirect_to_login\n            return redirect_to_login(request.get_full_path())\n        return super().dispatch(request, *args, **kwargs)",
        "detail": "core.mixins",
        "documentation": {}
    },
    {
        "label": "StudentAccessMixin",
        "kind": 6,
        "importPath": "core.permissions",
        "description": "core.permissions",
        "peekOfCode": "class StudentAccessMixin(UserPassesTestMixin):\n    \"\"\"Base mixin for student-related views requiring authentication\"\"\"\n    def test_func(self):\n        return self.request.user.is_authenticated\n    def handle_no_permission(self):\n        raise PermissionDenied(\"You must be logged in to access this page.\")\nclass AdminOrTeacherRequiredMixin(UserPassesTestMixin):\n    \"\"\"Mixin requiring admin or teacher permissions\"\"\"\n    def test_func(self):\n        user = self.request.user",
        "detail": "core.permissions",
        "documentation": {}
    },
    {
        "label": "AdminOrTeacherRequiredMixin",
        "kind": 6,
        "importPath": "core.permissions",
        "description": "core.permissions",
        "peekOfCode": "class AdminOrTeacherRequiredMixin(UserPassesTestMixin):\n    \"\"\"Mixin requiring admin or teacher permissions\"\"\"\n    def test_func(self):\n        user = self.request.user\n        return user.is_authenticated and (user.is_admin or user.is_teacher)\n    def handle_no_permission(self):\n        raise PermissionDenied(\n            \"You must be an admin or teacher to access this page.\")\nclass AdminRequiredMixin(UserPassesTestMixin):\n    \"\"\"Mixin requiring admin permissions only\"\"\"",
        "detail": "core.permissions",
        "documentation": {}
    },
    {
        "label": "AdminRequiredMixin",
        "kind": 6,
        "importPath": "core.permissions",
        "description": "core.permissions",
        "peekOfCode": "class AdminRequiredMixin(UserPassesTestMixin):\n    \"\"\"Mixin requiring admin permissions only\"\"\"\n    def test_func(self):\n        user = self.request.user\n        return user.is_authenticated and user.is_admin\n    def handle_no_permission(self):\n        raise PermissionDenied(\"You must be an admin to access this page.\")",
        "detail": "core.permissions",
        "documentation": {}
    },
    {
        "label": "role_required",
        "kind": 2,
        "importPath": "core.permissions",
        "description": "core.permissions",
        "peekOfCode": "def role_required(allowed_roles):\n    \"\"\"Decorator to check if user has required role\"\"\"\n    def decorator(view_func):\n        @wraps(view_func)\n        def wrapper(request, *args, **kwargs):\n            if not request.user.is_authenticated:\n                return redirect('accounts:login')\n            user = request.user\n            user_roles = []\n            if user.is_superuser or user.is_admin:",
        "detail": "core.permissions",
        "documentation": {}
    },
    {
        "label": "ColorThemeGenerator",
        "kind": 6,
        "importPath": "core.utils",
        "description": "core.utils",
        "peekOfCode": "class ColorThemeGenerator:\n    \"\"\"Generate complete color themes from primary colors\"\"\"\n    def __init__(self, primary_color, secondary_color):\n        self.primary = primary_color\n        self.secondary = secondary_color\n    def hex_to_rgb(self, hex_color):\n        \"\"\"Convert hex color to RGB values\"\"\"\n        hex_color = hex_color.lstrip('#')\n        if len(hex_color) == 3:\n            hex_color = ''.join([c*2 for c in hex_color])",
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "home_view",
        "kind": 2,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "def home_view(request):\n    \"\"\"Home page view - redirects to dashboard if logged in\"\"\"\n    if not request.user.is_authenticated:\n        redirect_url = 'account:login'\n        return redirect(redirect_url)\n    user = request.user\n    if user.is_superuser or user.is_admin:\n        return redirect('admin:admin_dashboard')\n    elif user.is_teacher:\n        return redirect('teacher:teacher_dashboard')",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "admin_dashboard",
        "kind": 2,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "def admin_dashboard(request):\n    \"\"\"Main dashboard view\"\"\"\n    user = request.user\n    school = School.get_current_school()\n    # Get basic counts\n    total_students = Student.objects.filter(is_active=True).count()\n    total_teachers = Teacher.objects.filter(is_active=True).count()\n    total_classes = Class.objects.count()\n    total_subjects = Subject.objects.count()\n    # Get current academic info",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "teacher_dashboard",
        "kind": 2,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "def teacher_dashboard(request):\n    \"\"\"Teacher dashboard\"\"\"\n    user = request.user\n    school = School.get_current_school()\n    current_academic_year = AcademicYear.objects.filter(\n        is_current=True).first()\n    current_term = Term.objects.filter(is_current=True).first()\n    # Get teacher profile\n    teacher_profile = None\n    if hasattr(user, 'teacher_profile'):",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "student_dashboard",
        "kind": 2,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "def student_dashboard(request):\n    \"\"\"Student dashboard\"\"\"\n    user = request.user\n    school = School.get_current_school()\n    current_academic_year = AcademicYear.objects.filter(\n        is_current=True).first()\n    current_term = Term.objects.filter(is_current=True).first()\n    # Get student profile\n    student_profile = None\n    if hasattr(user, 'student_profile'):",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "profile_view",
        "kind": 2,
        "importPath": "core.views",
        "description": "core.views",
        "peekOfCode": "def profile_view(request):\n    \"\"\"User profile view\"\"\"\n    user = request.user\n    profile = user.get_profile()\n    context = {\n        'user': user,\n        'profile': profile,\n        'title': 'My Profile'\n    }\n    return render(request, 'core/profile.html', context)",
        "detail": "core.views",
        "documentation": {}
    },
    {
        "label": "Command",
        "kind": 6,
        "importPath": "school.management.commands.wait_for_db",
        "description": "school.management.commands.wait_for_db",
        "peekOfCode": "class Command(BaseCommand):\n    \"\"\"Django command to wait for database\"\"\"\n    def handle(self, *args, **options):\n        \"\"\"Entrypoint for command. \"\"\"\n        self.stdout.write('Waiting for Database...')\n        db_up = False\n        while db_up is False:\n            try:\n                self.check(databases=['default'])\n                db_up = True",
        "detail": "school.management.commands.wait_for_db",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school.migrations.0001_initial",
        "description": "school.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='AcademicYear',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "school.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "school.migrations.0002_alter_programme_code",
        "description": "school.migrations.0002_alter_programme_code",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('school', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='programme',\n            name='code',\n            field=models.CharField(blank=True, max_length=5, unique=True),\n        ),",
        "detail": "school.migrations.0002_alter_programme_code",
        "documentation": {}
    },
    {
        "label": "school_theme_css",
        "kind": 2,
        "importPath": "school.templatetags.school_theme",
        "description": "school.templatetags.school_theme",
        "peekOfCode": "def school_theme_css():\n    \"\"\"Include school theme CSS variables\"\"\"\n    return {}\n@register.simple_tag\ndef school_gradient(direction=\"135deg\"):\n    \"\"\"Generate school gradient\"\"\"\n    return mark_safe(f\"linear-gradient({direction}, var(--school-primary), var(--school-secondary))\")\n@register.simple_tag\ndef school_color_rgb(color_name):\n    \"\"\"Get school color as RGB values\"\"\"",
        "detail": "school.templatetags.school_theme",
        "documentation": {}
    },
    {
        "label": "school_gradient",
        "kind": 2,
        "importPath": "school.templatetags.school_theme",
        "description": "school.templatetags.school_theme",
        "peekOfCode": "def school_gradient(direction=\"135deg\"):\n    \"\"\"Generate school gradient\"\"\"\n    return mark_safe(f\"linear-gradient({direction}, var(--school-primary), var(--school-secondary))\")\n@register.simple_tag\ndef school_color_rgb(color_name):\n    \"\"\"Get school color as RGB values\"\"\"\n    color_map = {\n        'primary': 'var(--school-primary-rgb)',\n        'secondary': 'var(--school-secondary-rgb)',\n    }",
        "detail": "school.templatetags.school_theme",
        "documentation": {}
    },
    {
        "label": "school_color_rgb",
        "kind": 2,
        "importPath": "school.templatetags.school_theme",
        "description": "school.templatetags.school_theme",
        "peekOfCode": "def school_color_rgb(color_name):\n    \"\"\"Get school color as RGB values\"\"\"\n    color_map = {\n        'primary': 'var(--school-primary-rgb)',\n        'secondary': 'var(--school-secondary-rgb)',\n    }\n    return mark_safe(color_map.get(color_name, 'var(--school-primary-rgb)'))\n@register.filter\ndef with_school_color(element_class, color_type=\"primary\"):\n    \"\"\"Add school color to CSS class\"\"\"",
        "detail": "school.templatetags.school_theme",
        "documentation": {}
    },
    {
        "label": "with_school_color",
        "kind": 2,
        "importPath": "school.templatetags.school_theme",
        "description": "school.templatetags.school_theme",
        "peekOfCode": "def with_school_color(element_class, color_type=\"primary\"):\n    \"\"\"Add school color to CSS class\"\"\"\n    if color_type == \"primary\":\n        return mark_safe(f\"{element_class} school-primary-bg\")\n    elif color_type == \"secondary\":\n        return mark_safe(f\"{element_class} school-secondary-bg\")\n    return element_class",
        "detail": "school.templatetags.school_theme",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 5,
        "importPath": "school.templatetags.school_theme",
        "description": "school.templatetags.school_theme",
        "peekOfCode": "register = template.Library()\n@register.inclusion_tag('school/theme_colors.html')\ndef school_theme_css():\n    \"\"\"Include school theme CSS variables\"\"\"\n    return {}\n@register.simple_tag\ndef school_gradient(direction=\"135deg\"):\n    \"\"\"Generate school gradient\"\"\"\n    return mark_safe(f\"linear-gradient({direction}, var(--school-primary), var(--school-secondary))\")\n@register.simple_tag",
        "detail": "school.templatetags.school_theme",
        "documentation": {}
    },
    {
        "label": "SchoolAdminForm",
        "kind": 6,
        "importPath": "school.admin",
        "description": "school.admin",
        "peekOfCode": "class SchoolAdminForm(forms.ModelForm):\n    \"\"\"Custom form for School admin with color picker\"\"\"\n    class Meta:\n        model = School\n        fields = '__all__'\n        widgets = {\n            'primary_color': forms.TextInput(attrs={\n                'type': 'color',\n                'style': 'width: 50px; height: 40px; border: none; cursor: pointer;'\n            }),",
        "detail": "school.admin",
        "documentation": {}
    },
    {
        "label": "SchoolAdmin",
        "kind": 6,
        "importPath": "school.admin",
        "description": "school.admin",
        "peekOfCode": "class SchoolAdmin(admin.ModelAdmin):\n    form = SchoolAdminForm\n    fieldsets = (\n        ('Basic Information', {\n            'fields': ('name', 'code', 'address', 'phone', 'email', 'website')\n        }),\n        ('School Details', {\n            'fields': ('motto', 'established_year', 'logo')\n        }),\n        ('Academic Settings', {",
        "detail": "school.admin",
        "documentation": {}
    },
    {
        "label": "AcademicYearAdmin",
        "kind": 6,
        "importPath": "school.admin",
        "description": "school.admin",
        "peekOfCode": "class AcademicYearAdmin(admin.ModelAdmin):\n    list_display = ('year', 'start_date', 'end_date',\n                    'is_current', 'created_at')\n    list_filter = ('is_current', 'year')\n    search_fields = ('year',)\n    ordering = ('-year',)\n@admin.register(Term)\nclass TermAdmin(admin.ModelAdmin):\n    list_display = ('__str__', 'academic_year',\n                    'start_date', 'end_date', 'is_current')",
        "detail": "school.admin",
        "documentation": {}
    },
    {
        "label": "TermAdmin",
        "kind": 6,
        "importPath": "school.admin",
        "description": "school.admin",
        "peekOfCode": "class TermAdmin(admin.ModelAdmin):\n    list_display = ('__str__', 'academic_year',\n                    'start_date', 'end_date', 'is_current')\n    list_filter = ('academic_year', 'term_number', 'is_current')\n    search_fields = ('academic_year__year',)\n    ordering = ('-academic_year__year', 'term_number')\n@admin.register(Programme)\nclass ProgrammeAdmin(admin.ModelAdmin):\n    list_display = ('name', 'code', 'created_at')\n    search_fields = ('name', 'code')",
        "detail": "school.admin",
        "documentation": {}
    },
    {
        "label": "ProgrammeAdmin",
        "kind": 6,
        "importPath": "school.admin",
        "description": "school.admin",
        "peekOfCode": "class ProgrammeAdmin(admin.ModelAdmin):\n    list_display = ('name', 'code', 'created_at')\n    search_fields = ('name', 'code')\n    readonly_fields = ('code',)\n    ordering = ('name',)\n@admin.register(House)\nclass HouseAdmin(admin.ModelAdmin):\n    list_display = ('name', 'house_master', 'color', 'created_at')\n    list_filter = ('house_master',)\n    search_fields = ('name', 'house_master__first_name',",
        "detail": "school.admin",
        "documentation": {}
    },
    {
        "label": "HouseAdmin",
        "kind": 6,
        "importPath": "school.admin",
        "description": "school.admin",
        "peekOfCode": "class HouseAdmin(admin.ModelAdmin):\n    list_display = ('name', 'house_master', 'color', 'created_at')\n    list_filter = ('house_master',)\n    search_fields = ('name', 'house_master__first_name',\n                     'house_master__last_name')\n    ordering = ('name',)\n@admin.register(Subject)\nclass SubjectAdmin(admin.ModelAdmin):\n    list_display = ('name', 'code', 'subject_type', 'created_at')\n    list_filter = ('subject_type',)",
        "detail": "school.admin",
        "documentation": {}
    },
    {
        "label": "SubjectAdmin",
        "kind": 6,
        "importPath": "school.admin",
        "description": "school.admin",
        "peekOfCode": "class SubjectAdmin(admin.ModelAdmin):\n    list_display = ('name', 'code', 'subject_type', 'created_at')\n    list_filter = ('subject_type',)\n    search_fields = ('name', 'code')\n    readonly_fields = ('code',)\n    ordering = ('name',)\n@admin.register(Class)\nclass ClassAdmin(admin.ModelAdmin):\n    list_display = ('__str__', 'get_full_name', 'level', 'programme',\n                    'class_teacher', 'get_student_count', 'capacity')",
        "detail": "school.admin",
        "documentation": {}
    },
    {
        "label": "ClassAdmin",
        "kind": 6,
        "importPath": "school.admin",
        "description": "school.admin",
        "peekOfCode": "class ClassAdmin(admin.ModelAdmin):\n    list_display = ('__str__', 'get_full_name', 'level', 'programme',\n                    'class_teacher', 'get_student_count', 'capacity')\n    list_filter = ('level', 'programme', 'class_teacher')\n    search_fields = ('name', 'programme__name',\n                     'class_teacher__first_name', 'class_teacher__last_name')\n    ordering = ('level', 'programme__name', 'name')\n    def get_student_count(self, obj):\n        return obj.get_student_count()\n    get_student_count.short_description = 'Students'",
        "detail": "school.admin",
        "documentation": {}
    },
    {
        "label": "StudentAdmin",
        "kind": 6,
        "importPath": "school.admin",
        "description": "school.admin",
        "peekOfCode": "class StudentAdmin(admin.ModelAdmin):\n    list_display = ('student_id', 'get_full_name',\n                    'current_class', 'house', 'year_admitted', 'is_active')\n    list_filter = ('current_class', 'house',\n                   'year_admitted', 'is_active', 'gender')\n    search_fields = ('student_id', 'first_name',\n                     'last_name', 'email', 'guardian_name')\n    readonly_fields = ('student_id', 'created_at', 'updated_at')\n    ordering = ('-created_at',)\n    fieldsets = (",
        "detail": "school.admin",
        "documentation": {}
    },
    {
        "label": "TeacherAdmin",
        "kind": 6,
        "importPath": "school.admin",
        "description": "school.admin",
        "peekOfCode": "class TeacherAdmin(admin.ModelAdmin):\n    list_display = ('teacher_id', 'get_full_name', 'qualification',\n                    'date_of_employment', 'years_of_experience', 'is_active')\n    list_filter = ('qualification', 'date_of_employment',\n                   'is_active', 'gender')\n    search_fields = ('teacher_id', 'first_name',\n                     'last_name', 'email', 'qualification')\n    readonly_fields = ('teacher_id', 'created_at', 'updated_at')\n    filter_horizontal = ('subjects',)\n    ordering = ('-created_at',)",
        "detail": "school.admin",
        "documentation": {}
    },
    {
        "label": "SchoolConfig",
        "kind": 6,
        "importPath": "school.apps",
        "description": "school.apps",
        "peekOfCode": "class SchoolConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'school'",
        "detail": "school.apps",
        "documentation": {}
    },
    {
        "label": "school_context",
        "kind": 2,
        "importPath": "school.context_processors",
        "description": "school.context_processors",
        "peekOfCode": "def school_context(request):\n    \"\"\"Add school information to all templates\"\"\"\n    try:\n        school = School.get_current_school()\n        return {\n            'school': school,\n            'school_name': school.name,\n            'school_code': school.code,\n            'school_motto': school.motto,\n            'school_colors': {",
        "detail": "school.context_processors",
        "documentation": {}
    },
    {
        "label": "SchoolConfigurationForm",
        "kind": 6,
        "importPath": "school.forms",
        "description": "school.forms",
        "peekOfCode": "class SchoolConfigurationForm(forms.ModelForm):\n    \"\"\"Form for school basic configuration\"\"\"\n    class Meta:\n        model = School\n        fields = [\n            'name', 'code', 'address', 'phone', 'email', 'website',\n            'motto', 'established_year', 'logo', 'academic_year_start_month',\n            'terms_per_year', 'headmaster_name', 'assistant_headmaster_name',\n            'primary_color', 'secondary_color'\n        ]",
        "detail": "school.forms",
        "documentation": {}
    },
    {
        "label": "AcademicYearForm",
        "kind": 6,
        "importPath": "school.forms",
        "description": "school.forms",
        "peekOfCode": "class AcademicYearForm(forms.ModelForm):\n    \"\"\"Form for academic year management\"\"\"\n    class Meta:\n        model = AcademicYear\n        fields = ['year', 'start_date', 'end_date', 'is_current']\n        widgets = {\n            'year': forms.NumberInput(attrs={\n                'class': 'form-control',\n                'min': 2020,\n                'max': 2050",
        "detail": "school.forms",
        "documentation": {}
    },
    {
        "label": "TermForm",
        "kind": 6,
        "importPath": "school.forms",
        "description": "school.forms",
        "peekOfCode": "class TermForm(forms.ModelForm):\n    \"\"\"Form for term management\"\"\"\n    class Meta:\n        model = Term\n        fields = ['academic_year', 'term_number',\n                  'start_date', 'end_date', 'is_current']\n        widgets = {\n            'academic_year': forms.Select(attrs={\n                'class': 'form-select'\n            }),",
        "detail": "school.forms",
        "documentation": {}
    },
    {
        "label": "ProgrammeForm",
        "kind": 6,
        "importPath": "school.forms",
        "description": "school.forms",
        "peekOfCode": "class ProgrammeForm(forms.ModelForm):\n    \"\"\"Form for programme management\"\"\"\n    class Meta:\n        model = Programme\n        fields = ['name', 'code', 'description']\n        widgets = {\n            'name': forms.TextInput(attrs={\n                'class': 'form-control',\n                'placeholder': 'Programme Name (e.g., General Arts)'\n            }),",
        "detail": "school.forms",
        "documentation": {}
    },
    {
        "label": "HouseForm",
        "kind": 6,
        "importPath": "school.forms",
        "description": "school.forms",
        "peekOfCode": "class HouseForm(forms.ModelForm):\n    \"\"\"Form for house management\"\"\"\n    class Meta:\n        model = House\n        fields = ['name', 'color', 'description', 'house_master']\n        widgets = {\n            'name': forms.TextInput(attrs={\n                'class': 'form-control',\n                'placeholder': 'House Name'\n            }),",
        "detail": "school.forms",
        "documentation": {}
    },
    {
        "label": "SubjectForm",
        "kind": 6,
        "importPath": "school.forms",
        "description": "school.forms",
        "peekOfCode": "class SubjectForm(forms.ModelForm):\n    \"\"\"Form for subject management\"\"\"\n    class Meta:\n        model = Subject\n        fields = ['name', 'subject_type']\n        widgets = {\n            'name': forms.TextInput(attrs={\n                'class': 'form-control',\n                'placeholder': 'Subject Name'\n            }),",
        "detail": "school.forms",
        "documentation": {}
    },
    {
        "label": "ClassForm",
        "kind": 6,
        "importPath": "school.forms",
        "description": "school.forms",
        "peekOfCode": "class ClassForm(forms.ModelForm):\n    \"\"\"Form for class management\"\"\"\n    class Meta:\n        model = Class\n        fields = ['name', 'programme', 'level', 'class_teacher', 'capacity']\n        widgets = {\n            'name': forms.TextInput(attrs={\n                'class': 'form-control',\n                'placeholder': 'Class Section (e.g., A, B, C)'\n            }),",
        "detail": "school.forms",
        "documentation": {}
    },
    {
        "label": "QuickSetupForm",
        "kind": 6,
        "importPath": "school.forms",
        "description": "school.forms",
        "peekOfCode": "class QuickSetupForm(forms.Form):\n    \"\"\"Form for quick school setup\"\"\"\n    # School basics\n    school_name = forms.CharField(\n        max_length=200,\n        widget=forms.TextInput(attrs={\n            'class': 'form-control',\n            'placeholder': 'T. I. Ahmadiyya SHS'\n        })\n    )",
        "detail": "school.forms",
        "documentation": {}
    },
    {
        "label": "TimeStampedModel",
        "kind": 6,
        "importPath": "school.models",
        "description": "school.models",
        "peekOfCode": "class TimeStampedModel(models.Model):\n    \"\"\"Abstract model with created and modified timestamps\"\"\"\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    class Meta:\n        abstract = True\nclass School(TimeStampedModel):\n    \"\"\"School information stored in database\"\"\"\n    # Basic Information\n    name = models.CharField(max_length=200)",
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "School",
        "kind": 6,
        "importPath": "school.models",
        "description": "school.models",
        "peekOfCode": "class School(TimeStampedModel):\n    \"\"\"School information stored in database\"\"\"\n    # Basic Information\n    name = models.CharField(max_length=200)\n    code = models.CharField(max_length=10, unique=True)\n    address = models.CharField(max_length=255, blank=True, null=True)\n    phone = models.CharField(max_length=15, validators=[PHONE_VALIDATOR])\n    email = models.EmailField()\n    website = models.URLField(blank=True, null=True)\n    # School Details",
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "AcademicYear",
        "kind": 6,
        "importPath": "school.models",
        "description": "school.models",
        "peekOfCode": "class AcademicYear(TimeStampedModel):\n    \"\"\"Academic year model\"\"\"\n    year = models.IntegerField(unique=True)\n    start_date = models.DateField()\n    end_date = models.DateField()\n    is_current = models.BooleanField(default=False)\n    class Meta:\n        ordering = ['-year']\n    def __str__(self):\n        return f\"{self.year} Academic Year\"",
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Term",
        "kind": 6,
        "importPath": "school.models",
        "description": "school.models",
        "peekOfCode": "class Term(TimeStampedModel):\n    \"\"\"Academic term model\"\"\"\n    TERM_CHOICES = [\n        (1, 'First Term'),\n        (2, 'Second Term'),\n        (3, 'Third Term'),\n    ]\n    academic_year = models.ForeignKey(\n        AcademicYear, on_delete=models.CASCADE, related_name='terms')\n    term_number = models.IntegerField(choices=TERM_CHOICES)",
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Programme",
        "kind": 6,
        "importPath": "school.models",
        "description": "school.models",
        "peekOfCode": "class Programme(TimeStampedModel):\n    \"\"\"Academic programmes like Arts, Business, Science\"\"\"\n    name = models.CharField(max_length=100, unique=True)\n    code = models.CharField(max_length=5, unique=True, blank=True)\n    description = models.TextField(blank=True)\n    class Meta:\n        verbose_name = 'Programme'\n        verbose_name_plural = 'Programmes'\n        ordering = ['name']\n    def save(self, *args, **kwargs):",
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "House",
        "kind": 6,
        "importPath": "school.models",
        "description": "school.models",
        "peekOfCode": "class House(TimeStampedModel):\n    \"\"\"Student houses for school organization\"\"\"\n    name = models.CharField(max_length=100, unique=True)\n    color = models.CharField(max_length=7, default=\"#1B5E20\")  # Hex color\n    description = models.TextField(blank=True)\n    house_master = models.ForeignKey(\n        'Teacher',\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,",
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Subject",
        "kind": 6,
        "importPath": "school.models",
        "description": "school.models",
        "peekOfCode": "class Subject(TimeStampedModel):\n    \"\"\"Subject taught in the school\"\"\"\n    name = models.CharField(max_length=100, unique=True)\n    subject_type = models.CharField(\n        max_length=50,\n        choices=[\n            ('core', 'Core'),\n            ('elective', 'Elective'),\n            ('extracurricular', 'Extracurricular Activity')\n        ],",
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Class",
        "kind": 6,
        "importPath": "school.models",
        "description": "school.models",
        "peekOfCode": "class Class(TimeStampedModel):\n    \"\"\"Enhanced Class/Form with Programme and Level structure\"\"\"\n    LEVEL_CHOICES = [\n        (1, 'Form 1'),\n        (2, 'Form 2'),\n        (3, 'Form 3'),\n    ]\n    name = models.CharField(\n        max_length=10, help_text=\"Class section (e.g., A, B, C)\")\n    programme = models.ForeignKey(",
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "IDGenerationMixin",
        "kind": 6,
        "importPath": "school.models",
        "description": "school.models",
        "peekOfCode": "class IDGenerationMixin:\n    \"\"\"Mixin for models that need auto-generated IDs using School model\"\"\"\n    ID_PREFIX = ''\n    id_field = None\n    def generate_id(self):\n        \"\"\"Generate a unique ID with pattern: {ID_PREFIX}{school_code}{SEQ:03d}{Year}\"\"\"\n        school = School.get_current_school()\n        school_code = school.code\n        year = str(getattr(self, 'year_admitted', timezone.now().year))[-2:]\n        prefix = self.ID_PREFIX",
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "school.models",
        "description": "school.models",
        "peekOfCode": "class Person(IDGenerationMixin, TimeStampedModel):\n    \"\"\"Abstract base model for all person types (Student, Teacher, etc.)\"\"\"\n    GENDER_CHOICES = (('M', 'Male'), ('F', 'Female'))\n    user = models.OneToOneField(\n        settings.AUTH_USER_MODEL,\n        on_delete=models.SET_NULL,\n        related_name=\"%(class)s_profile\",\n        blank=True, null=True\n    )\n    first_name = models.CharField(",
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "school.models",
        "description": "school.models",
        "peekOfCode": "class Student(Person):\n    \"\"\"Student model - inherits from Person with IDGenerationMixin\"\"\"\n    ID_PREFIX = 'STU'\n    id_field = 'student_id'\n    student_id = models.CharField(max_length=20, unique=True, blank=True)\n    current_class = models.ForeignKey(\n        Class,\n        on_delete=models.SET_NULL,\n        null=True,\n        blank=True,",
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "Teacher",
        "kind": 6,
        "importPath": "school.models",
        "description": "school.models",
        "peekOfCode": "class Teacher(Person):\n    \"\"\"Teacher model - inherits from Person with IDGenerationMixin\"\"\"\n    ID_PREFIX = 'TCH'\n    id_field = 'teacher_id'\n    teacher_id = models.CharField(max_length=20, unique=True, blank=True)\n    qualification = models.CharField(max_length=200)\n    specialization = models.CharField(max_length=200, blank=True, null=True)\n    years_of_experience = models.IntegerField(default=0)\n    date_of_employment = models.DateField()\n    subjects = models.ManyToManyField(Subject, blank=True)",
        "detail": "school.models",
        "documentation": {}
    },
    {
        "label": "PHONE_VALIDATOR",
        "kind": 5,
        "importPath": "school.validators",
        "description": "school.validators",
        "peekOfCode": "PHONE_VALIDATOR = RegexValidator(\n    regex=r'^(\\+233|0)[0-9]{9}$',\n    message=\"Phone number must be in format: +233XXXXXXXXX or 0XXXXXXXXX\"\n)\n# Ghana Card ID validator\nGHANA_CARD_VALIDATOR = RegexValidator(\n    regex=r'^GHA-[0-9]{9}-[0-9]$',\n    message=\"Ghana Card number must be in format: GHA-XXXXXXXXX-X\"\n)",
        "detail": "school.validators",
        "documentation": {}
    },
    {
        "label": "GHANA_CARD_VALIDATOR",
        "kind": 5,
        "importPath": "school.validators",
        "description": "school.validators",
        "peekOfCode": "GHANA_CARD_VALIDATOR = RegexValidator(\n    regex=r'^GHA-[0-9]{9}-[0-9]$',\n    message=\"Ghana Card number must be in format: GHA-XXXXXXXXX-X\"\n)",
        "detail": "school.validators",
        "documentation": {}
    },
    {
        "label": "AcademicYearListView",
        "kind": 6,
        "importPath": "school.views",
        "description": "school.views",
        "peekOfCode": "class AcademicYearListView(LoginRequiredMixin, UserPassesTestMixin, ListView):\n    model = AcademicYear\n    template_name = 'school/years/list.html'\n    context_object_name = 'academic_years'\n    def test_func(self):\n        return is_admin_user(self.request.user)\nclass AcademicYearCreateView(LoginRequiredMixin, UserPassesTestMixin, CreateView):\n    model = AcademicYear\n    form_class = AcademicYearForm\n    template_name = 'school/years/form.html'",
        "detail": "school.views",
        "documentation": {}
    },
    {
        "label": "AcademicYearCreateView",
        "kind": 6,
        "importPath": "school.views",
        "description": "school.views",
        "peekOfCode": "class AcademicYearCreateView(LoginRequiredMixin, UserPassesTestMixin, CreateView):\n    model = AcademicYear\n    form_class = AcademicYearForm\n    template_name = 'school/years/form.html'\n    success_url = reverse_lazy('admin:academic_years')\n    def test_func(self):\n        return is_admin_user(self.request.user)\n    def form_valid(self, form):\n        messages.success(self.request, 'Academic year created successfully.')\n        return super().form_valid(form)",
        "detail": "school.views",
        "documentation": {}
    },
    {
        "label": "AcademicYearUpdateView",
        "kind": 6,
        "importPath": "school.views",
        "description": "school.views",
        "peekOfCode": "class AcademicYearUpdateView(LoginRequiredMixin, UserPassesTestMixin, UpdateView):\n    model = AcademicYear\n    form_class = AcademicYearForm\n    template_name = 'school/years/form.html'\n    success_url = reverse_lazy('admin:academic_years')\n    def test_func(self):\n        return is_admin_user(self.request.user)\n    def form_valid(self, form):\n        messages.success(self.request, 'Academic year updated successfully.')\n        return super().form_valid(form)",
        "detail": "school.views",
        "documentation": {}
    },
    {
        "label": "AcademicYearDeleteView",
        "kind": 6,
        "importPath": "school.views",
        "description": "school.views",
        "peekOfCode": "class AcademicYearDeleteView(LoginRequiredMixin, UserPassesTestMixin, DeleteView):\n    model = AcademicYear\n    template_name = 'school/years/confirm_delete.html'\n    success_url = reverse_lazy('admin:academic_years')\n    def test_func(self):\n        return is_admin_user(self.request.user)\n    def delete(self, request, *args, **kwargs):\n        messages.success(request, 'Academic year deleted successfully.')\n        return super().delete(request, *args, **kwargs)\n# Programme Views",
        "detail": "school.views",
        "documentation": {}
    },
    {
        "label": "ProgrammeListView",
        "kind": 6,
        "importPath": "school.views",
        "description": "school.views",
        "peekOfCode": "class ProgrammeListView(LoginRequiredMixin, UserPassesTestMixin, ListView):\n    model = Programme\n    template_name = 'school/programmes/list.html'\n    context_object_name = 'programmes'\n    def test_func(self):\n        return is_admin_user(self.request.user)\nclass ProgrammeCreateView(LoginRequiredMixin, UserPassesTestMixin, CreateView):\n    model = Programme\n    form_class = ProgrammeForm\n    template_name = 'school/programmes/form.html'",
        "detail": "school.views",
        "documentation": {}
    },
    {
        "label": "ProgrammeCreateView",
        "kind": 6,
        "importPath": "school.views",
        "description": "school.views",
        "peekOfCode": "class ProgrammeCreateView(LoginRequiredMixin, UserPassesTestMixin, CreateView):\n    model = Programme\n    form_class = ProgrammeForm\n    template_name = 'school/programmes/form.html'\n    success_url = reverse_lazy('admin:programmes')\n    def test_func(self):\n        return is_admin_user(self.request.user)\n    def form_valid(self, form):\n        messages.success(self.request, 'Programme created successfully.')\n        return super().form_valid(form)",
        "detail": "school.views",
        "documentation": {}
    },
    {
        "label": "ProgrammeUpdateView",
        "kind": 6,
        "importPath": "school.views",
        "description": "school.views",
        "peekOfCode": "class ProgrammeUpdateView(LoginRequiredMixin, UserPassesTestMixin, UpdateView):\n    model = Programme\n    form_class = ProgrammeForm\n    template_name = 'school/programmes/form.html'\n    success_url = reverse_lazy('admin:programmes')\n    def test_func(self):\n        return is_admin_user(self.request.user)\n    def form_valid(self, form):\n        messages.success(self.request, 'Programme updated successfully.')\n        return super().form_valid(form)",
        "detail": "school.views",
        "documentation": {}
    },
    {
        "label": "ProgrammeDeleteView",
        "kind": 6,
        "importPath": "school.views",
        "description": "school.views",
        "peekOfCode": "class ProgrammeDeleteView(LoginRequiredMixin, UserPassesTestMixin, DeleteView):\n    model = Programme\n    template_name = 'school/programmes/confirm_delete.html'\n    success_url = reverse_lazy('admin:programmes')\n    def test_func(self):\n        return is_admin_user(self.request.user)\n    def delete(self, request, *args, **kwargs):\n        messages.success(request, 'Programme deleted successfully.')\n        return super().delete(request, *args, **kwargs)\n# House Views",
        "detail": "school.views",
        "documentation": {}
    },
    {
        "label": "HouseListView",
        "kind": 6,
        "importPath": "school.views",
        "description": "school.views",
        "peekOfCode": "class HouseListView(LoginRequiredMixin, UserPassesTestMixin, ListView):\n    model = House\n    template_name = 'school/houses/list.html'\n    context_object_name = 'houses'\n    def test_func(self):\n        return is_admin_user(self.request.user)\nclass HouseCreateView(LoginRequiredMixin, UserPassesTestMixin, CreateView):\n    model = House\n    form_class = HouseForm\n    template_name = 'school/houses/form.html'",
        "detail": "school.views",
        "documentation": {}
    },
    {
        "label": "HouseCreateView",
        "kind": 6,
        "importPath": "school.views",
        "description": "school.views",
        "peekOfCode": "class HouseCreateView(LoginRequiredMixin, UserPassesTestMixin, CreateView):\n    model = House\n    form_class = HouseForm\n    template_name = 'school/houses/form.html'\n    success_url = reverse_lazy('admin:houses')\n    def test_func(self):\n        return is_admin_user(self.request.user)\n    def form_valid(self, form):\n        messages.success(self.request, 'House created successfully.')\n        return super().form_valid(form)",
        "detail": "school.views",
        "documentation": {}
    },
    {
        "label": "HouseUpdateView",
        "kind": 6,
        "importPath": "school.views",
        "description": "school.views",
        "peekOfCode": "class HouseUpdateView(LoginRequiredMixin, UserPassesTestMixin, UpdateView):\n    model = House\n    form_class = HouseForm\n    template_name = 'school/houses/form.html'\n    success_url = reverse_lazy('admin:houses')\n    def test_func(self):\n        return is_admin_user(self.request.user)\n    def form_valid(self, form):\n        messages.success(self.request, 'House updated successfully.')\n        return super().form_valid(form)",
        "detail": "school.views",
        "documentation": {}
    },
    {
        "label": "HouseDetailView",
        "kind": 6,
        "importPath": "school.views",
        "description": "school.views",
        "peekOfCode": "class HouseDetailView(LoginRequiredMixin, UserPassesTestMixin, DetailView):\n    model = House\n    template_name = 'school/houses/detail.html'\n    context_object_name = 'house'\n    def test_func(self):\n        return is_admin_user(self.request.user)\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        house = self.get_object()\n        context['students'] = house.students.filter(",
        "detail": "school.views",
        "documentation": {}
    },
    {
        "label": "HouseDeleteView",
        "kind": 6,
        "importPath": "school.views",
        "description": "school.views",
        "peekOfCode": "class HouseDeleteView(LoginRequiredMixin, UserPassesTestMixin, DeleteView):\n    model = House\n    template_name = 'school/houses/confirm_delete.html'\n    success_url = reverse_lazy('admin:houses')\n    def test_func(self):\n        return is_admin_user(self.request.user)\n    def delete(self, request, *args, **kwargs):\n        messages.success(request, 'House deleted successfully.')\n        return super().delete(request, *args, **kwargs)\n# Subject Views",
        "detail": "school.views",
        "documentation": {}
    },
    {
        "label": "SubjectListView",
        "kind": 6,
        "importPath": "school.views",
        "description": "school.views",
        "peekOfCode": "class SubjectListView(LoginRequiredMixin, UserPassesTestMixin, ListView):\n    model = Subject\n    template_name = 'school/subjects/list.html'\n    context_object_name = 'subjects'\n    def test_func(self):\n        return is_admin_user(self.request.user)\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        # Add subject counts by type\n        context['core_count'] = Subject.objects.filter(",
        "detail": "school.views",
        "documentation": {}
    },
    {
        "label": "SubjectCreateView",
        "kind": 6,
        "importPath": "school.views",
        "description": "school.views",
        "peekOfCode": "class SubjectCreateView(LoginRequiredMixin, UserPassesTestMixin, CreateView):\n    model = Subject\n    form_class = SubjectForm\n    template_name = 'school/subjects/form.html'\n    success_url = reverse_lazy('admin:subjects')\n    def test_func(self):\n        return is_admin_user(self.request.user)\n    def form_valid(self, form):\n        messages.success(self.request, 'Subject created successfully.')\n        return super().form_valid(form)",
        "detail": "school.views",
        "documentation": {}
    },
    {
        "label": "SubjectUpdateView",
        "kind": 6,
        "importPath": "school.views",
        "description": "school.views",
        "peekOfCode": "class SubjectUpdateView(LoginRequiredMixin, UserPassesTestMixin, UpdateView):\n    model = Subject\n    form_class = SubjectForm\n    template_name = 'school/subjects/form.html'\n    success_url = reverse_lazy('admin:subjects')\n    def test_func(self):\n        return is_admin_user(self.request.user)\n    def form_valid(self, form):\n        messages.success(self.request, 'Subject updated successfully.')\n        return super().form_valid(form)",
        "detail": "school.views",
        "documentation": {}
    },
    {
        "label": "SubjectDeleteView",
        "kind": 6,
        "importPath": "school.views",
        "description": "school.views",
        "peekOfCode": "class SubjectDeleteView(LoginRequiredMixin, UserPassesTestMixin, DeleteView):\n    model = Subject\n    template_name = 'school/subjects/confirm_delete.html'\n    success_url = reverse_lazy('admin:subjects')\n    def test_func(self):\n        return is_admin_user(self.request.user)\n    def delete(self, request, *args, **kwargs):\n        messages.success(request, 'Subject deleted successfully.')\n        return super().delete(request, *args, **kwargs)\n# Class Views",
        "detail": "school.views",
        "documentation": {}
    },
    {
        "label": "ClassListView",
        "kind": 6,
        "importPath": "school.views",
        "description": "school.views",
        "peekOfCode": "class ClassListView(LoginRequiredMixin, UserPassesTestMixin, ListView):\n    model = Class\n    template_name = 'school/classes/list.html'\n    context_object_name = 'classes'\n    def test_func(self):\n        return is_admin_user(self.request.user)\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        # Group classes by level\n        classes_by_level = {}",
        "detail": "school.views",
        "documentation": {}
    },
    {
        "label": "ClassCreateView",
        "kind": 6,
        "importPath": "school.views",
        "description": "school.views",
        "peekOfCode": "class ClassCreateView(LoginRequiredMixin, UserPassesTestMixin, CreateView):\n    model = Class\n    form_class = ClassForm\n    template_name = 'school/classes/form.html'\n    success_url = reverse_lazy('admin:classes')\n    def test_func(self):\n        return is_admin_user(self.request.user)\n    def form_valid(self, form):\n        messages.success(self.request, 'Class created successfully.')\n        return super().form_valid(form)",
        "detail": "school.views",
        "documentation": {}
    },
    {
        "label": "ClassUpdateView",
        "kind": 6,
        "importPath": "school.views",
        "description": "school.views",
        "peekOfCode": "class ClassUpdateView(LoginRequiredMixin, UserPassesTestMixin, UpdateView):\n    model = Class\n    form_class = ClassForm\n    template_name = 'school/classes/form.html'\n    success_url = reverse_lazy('admin:classes')\n    def test_func(self):\n        return is_admin_user(self.request.user)\n    def form_valid(self, form):\n        messages.success(self.request, 'Class updated successfully.')\n        return super().form_valid(form)",
        "detail": "school.views",
        "documentation": {}
    },
    {
        "label": "ClassDetailView",
        "kind": 6,
        "importPath": "school.views",
        "description": "school.views",
        "peekOfCode": "class ClassDetailView(LoginRequiredMixin, UserPassesTestMixin, DetailView):\n    model = Class\n    template_name = 'school/classes/detail.html'\n    context_object_name = 'class_obj'\n    def test_func(self):\n        return is_admin_user(self.request.user)\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        class_obj = self.get_object()\n        context['students'] = class_obj.students.filter(",
        "detail": "school.views",
        "documentation": {}
    },
    {
        "label": "ClassDeleteView",
        "kind": 6,
        "importPath": "school.views",
        "description": "school.views",
        "peekOfCode": "class ClassDeleteView(LoginRequiredMixin, UserPassesTestMixin, DeleteView):\n    model = Class\n    template_name = 'school/classes/confirm_delete.html'\n    success_url = reverse_lazy('admin:classes')\n    def test_func(self):\n        return is_admin_user(self.request.user)\n    def delete(self, request, *args, **kwargs):\n        messages.success(request, 'Class deleted successfully.')\n        return super().delete(request, *args, **kwargs)\n@login_required",
        "detail": "school.views",
        "documentation": {}
    },
    {
        "label": "is_admin_user",
        "kind": 2,
        "importPath": "school.views",
        "description": "school.views",
        "peekOfCode": "def is_admin_user(user):\n    \"\"\"Check if user is admin or superuser\"\"\"\n    return user.is_authenticated and (user.is_admin or user.is_superuser)\n@login_required\n@user_passes_test(is_admin_user)\ndef school_configuration_view(request):\n    \"\"\"School configuration view\"\"\"\n    school = School.get_current_school()\n    if request.method == 'POST':\n        form = SchoolConfigurationForm(",
        "detail": "school.views",
        "documentation": {}
    },
    {
        "label": "school_configuration_view",
        "kind": 2,
        "importPath": "school.views",
        "description": "school.views",
        "peekOfCode": "def school_configuration_view(request):\n    \"\"\"School configuration view\"\"\"\n    school = School.get_current_school()\n    if request.method == 'POST':\n        form = SchoolConfigurationForm(\n            request.POST, request.FILES, instance=school)\n        if form.is_valid():\n            form.save()\n            messages.success(\n                request, 'School configuration updated successfully.')",
        "detail": "school.views",
        "documentation": {}
    },
    {
        "label": "quick_setup_view",
        "kind": 2,
        "importPath": "school.views",
        "description": "school.views",
        "peekOfCode": "def quick_setup_view(request):\n    \"\"\"Quick setup view for new installations\"\"\"\n    if request.method == 'POST':\n        form = QuickSetupForm(request.POST)\n        if form.is_valid():\n            try:\n                with transaction.atomic():\n                    # Update school information\n                    school = School.get_current_school()\n                    school.name = form.cleaned_data['school_name']",
        "detail": "school.views",
        "documentation": {}
    },
    {
        "label": "setup_school_view",
        "kind": 2,
        "importPath": "school.views",
        "description": "school.views",
        "peekOfCode": "def setup_school_view(request):\n    \"\"\"Setup dashboard showing current status\"\"\"\n    school = School.get_current_school()\n    # Get counts\n    academic_years_count = AcademicYear.objects.count()\n    programmes_count = Programme.objects.count()\n    houses_count = House.objects.count()\n    subjects_count = Subject.objects.count()\n    classes_count = Class.objects.count()\n    students_count = Student.objects.filter(is_active=True).count()",
        "detail": "school.views",
        "documentation": {}
    },
    {
        "label": "StudentConfig",
        "kind": 6,
        "importPath": "student.apps",
        "description": "student.apps",
        "peekOfCode": "class StudentConfig(AppConfig):\n    name = 'student'\n    verbose_name = 'Student Management'\n    def ready(self):\n        \"\"\"Import signals when the app is ready\"\"\"\n        try:\n            import student.signals\n        except ImportError:\n            pass",
        "detail": "student.apps",
        "documentation": {}
    },
    {
        "label": "STUDENT_STATUS_ACTIVE",
        "kind": 5,
        "importPath": "student.constants",
        "description": "student.constants",
        "peekOfCode": "STUDENT_STATUS_ACTIVE = 'active'\nSTUDENT_STATUS_INACTIVE = 'inactive'\nSTUDENT_STATUS_GRADUATED = 'graduated'\nSTUDENT_STATUS_TRANSFERRED = 'transferred'\nSTUDENT_STATUS_CHOICES = [\n    (STUDENT_STATUS_ACTIVE, 'Active'),\n    (STUDENT_STATUS_INACTIVE, 'Inactive'),\n    (STUDENT_STATUS_GRADUATED, 'Graduated'),\n    (STUDENT_STATUS_TRANSFERRED, 'Transferred'),\n]",
        "detail": "student.constants",
        "documentation": {}
    },
    {
        "label": "STUDENT_STATUS_INACTIVE",
        "kind": 5,
        "importPath": "student.constants",
        "description": "student.constants",
        "peekOfCode": "STUDENT_STATUS_INACTIVE = 'inactive'\nSTUDENT_STATUS_GRADUATED = 'graduated'\nSTUDENT_STATUS_TRANSFERRED = 'transferred'\nSTUDENT_STATUS_CHOICES = [\n    (STUDENT_STATUS_ACTIVE, 'Active'),\n    (STUDENT_STATUS_INACTIVE, 'Inactive'),\n    (STUDENT_STATUS_GRADUATED, 'Graduated'),\n    (STUDENT_STATUS_TRANSFERRED, 'Transferred'),\n]\n# CSV upload settings",
        "detail": "student.constants",
        "documentation": {}
    },
    {
        "label": "STUDENT_STATUS_GRADUATED",
        "kind": 5,
        "importPath": "student.constants",
        "description": "student.constants",
        "peekOfCode": "STUDENT_STATUS_GRADUATED = 'graduated'\nSTUDENT_STATUS_TRANSFERRED = 'transferred'\nSTUDENT_STATUS_CHOICES = [\n    (STUDENT_STATUS_ACTIVE, 'Active'),\n    (STUDENT_STATUS_INACTIVE, 'Inactive'),\n    (STUDENT_STATUS_GRADUATED, 'Graduated'),\n    (STUDENT_STATUS_TRANSFERRED, 'Transferred'),\n]\n# CSV upload settings\nMAX_UPLOAD_SIZE = 5 * 1024 * 1024  # 5MB",
        "detail": "student.constants",
        "documentation": {}
    },
    {
        "label": "STUDENT_STATUS_TRANSFERRED",
        "kind": 5,
        "importPath": "student.constants",
        "description": "student.constants",
        "peekOfCode": "STUDENT_STATUS_TRANSFERRED = 'transferred'\nSTUDENT_STATUS_CHOICES = [\n    (STUDENT_STATUS_ACTIVE, 'Active'),\n    (STUDENT_STATUS_INACTIVE, 'Inactive'),\n    (STUDENT_STATUS_GRADUATED, 'Graduated'),\n    (STUDENT_STATUS_TRANSFERRED, 'Transferred'),\n]\n# CSV upload settings\nMAX_UPLOAD_SIZE = 5 * 1024 * 1024  # 5MB\nMAX_STUDENTS_PER_UPLOAD = 1000",
        "detail": "student.constants",
        "documentation": {}
    },
    {
        "label": "STUDENT_STATUS_CHOICES",
        "kind": 5,
        "importPath": "student.constants",
        "description": "student.constants",
        "peekOfCode": "STUDENT_STATUS_CHOICES = [\n    (STUDENT_STATUS_ACTIVE, 'Active'),\n    (STUDENT_STATUS_INACTIVE, 'Inactive'),\n    (STUDENT_STATUS_GRADUATED, 'Graduated'),\n    (STUDENT_STATUS_TRANSFERRED, 'Transferred'),\n]\n# CSV upload settings\nMAX_UPLOAD_SIZE = 5 * 1024 * 1024  # 5MB\nMAX_STUDENTS_PER_UPLOAD = 1000\nALLOWED_FILE_EXTENSIONS = ['.csv']",
        "detail": "student.constants",
        "documentation": {}
    },
    {
        "label": "MAX_UPLOAD_SIZE",
        "kind": 5,
        "importPath": "student.constants",
        "description": "student.constants",
        "peekOfCode": "MAX_UPLOAD_SIZE = 5 * 1024 * 1024  # 5MB\nMAX_STUDENTS_PER_UPLOAD = 1000\nALLOWED_FILE_EXTENSIONS = ['.csv']\n# Pagination settings\nSTUDENTS_PER_PAGE = 20\nMAX_STUDENTS_PER_PAGE = 100\n# Student ID generation settings\nSTUDENT_ID_PREFIX = 'STU'\nSTUDENT_ID_LENGTH = 15\n# Export settings",
        "detail": "student.constants",
        "documentation": {}
    },
    {
        "label": "MAX_STUDENTS_PER_UPLOAD",
        "kind": 5,
        "importPath": "student.constants",
        "description": "student.constants",
        "peekOfCode": "MAX_STUDENTS_PER_UPLOAD = 1000\nALLOWED_FILE_EXTENSIONS = ['.csv']\n# Pagination settings\nSTUDENTS_PER_PAGE = 20\nMAX_STUDENTS_PER_PAGE = 100\n# Student ID generation settings\nSTUDENT_ID_PREFIX = 'STU'\nSTUDENT_ID_LENGTH = 15\n# Export settings\nEXPORT_FORMATS = ['csv', 'xlsx', 'pdf']",
        "detail": "student.constants",
        "documentation": {}
    },
    {
        "label": "ALLOWED_FILE_EXTENSIONS",
        "kind": 5,
        "importPath": "student.constants",
        "description": "student.constants",
        "peekOfCode": "ALLOWED_FILE_EXTENSIONS = ['.csv']\n# Pagination settings\nSTUDENTS_PER_PAGE = 20\nMAX_STUDENTS_PER_PAGE = 100\n# Student ID generation settings\nSTUDENT_ID_PREFIX = 'STU'\nSTUDENT_ID_LENGTH = 15\n# Export settings\nEXPORT_FORMATS = ['csv', 'xlsx', 'pdf']\nMAX_EXPORT_RECORDS = 5000",
        "detail": "student.constants",
        "documentation": {}
    },
    {
        "label": "STUDENTS_PER_PAGE",
        "kind": 5,
        "importPath": "student.constants",
        "description": "student.constants",
        "peekOfCode": "STUDENTS_PER_PAGE = 20\nMAX_STUDENTS_PER_PAGE = 100\n# Student ID generation settings\nSTUDENT_ID_PREFIX = 'STU'\nSTUDENT_ID_LENGTH = 15\n# Export settings\nEXPORT_FORMATS = ['csv', 'xlsx', 'pdf']\nMAX_EXPORT_RECORDS = 5000\n# Search settings\nMIN_SEARCH_LENGTH = 2",
        "detail": "student.constants",
        "documentation": {}
    },
    {
        "label": "MAX_STUDENTS_PER_PAGE",
        "kind": 5,
        "importPath": "student.constants",
        "description": "student.constants",
        "peekOfCode": "MAX_STUDENTS_PER_PAGE = 100\n# Student ID generation settings\nSTUDENT_ID_PREFIX = 'STU'\nSTUDENT_ID_LENGTH = 15\n# Export settings\nEXPORT_FORMATS = ['csv', 'xlsx', 'pdf']\nMAX_EXPORT_RECORDS = 5000\n# Search settings\nMIN_SEARCH_LENGTH = 2\nSEARCH_FIELDS = [",
        "detail": "student.constants",
        "documentation": {}
    },
    {
        "label": "STUDENT_ID_PREFIX",
        "kind": 5,
        "importPath": "student.constants",
        "description": "student.constants",
        "peekOfCode": "STUDENT_ID_PREFIX = 'STU'\nSTUDENT_ID_LENGTH = 15\n# Export settings\nEXPORT_FORMATS = ['csv', 'xlsx', 'pdf']\nMAX_EXPORT_RECORDS = 5000\n# Search settings\nMIN_SEARCH_LENGTH = 2\nSEARCH_FIELDS = [\n    'first_name', 'last_name', 'student_id', 'email',\n    'phone', 'guardian_name', 'guardian_phone'",
        "detail": "student.constants",
        "documentation": {}
    },
    {
        "label": "STUDENT_ID_LENGTH",
        "kind": 5,
        "importPath": "student.constants",
        "description": "student.constants",
        "peekOfCode": "STUDENT_ID_LENGTH = 15\n# Export settings\nEXPORT_FORMATS = ['csv', 'xlsx', 'pdf']\nMAX_EXPORT_RECORDS = 5000\n# Search settings\nMIN_SEARCH_LENGTH = 2\nSEARCH_FIELDS = [\n    'first_name', 'last_name', 'student_id', 'email',\n    'phone', 'guardian_name', 'guardian_phone'\n]",
        "detail": "student.constants",
        "documentation": {}
    },
    {
        "label": "EXPORT_FORMATS",
        "kind": 5,
        "importPath": "student.constants",
        "description": "student.constants",
        "peekOfCode": "EXPORT_FORMATS = ['csv', 'xlsx', 'pdf']\nMAX_EXPORT_RECORDS = 5000\n# Search settings\nMIN_SEARCH_LENGTH = 2\nSEARCH_FIELDS = [\n    'first_name', 'last_name', 'student_id', 'email',\n    'phone', 'guardian_name', 'guardian_phone'\n]\n# Validation settings\nMIN_AGE = 10",
        "detail": "student.constants",
        "documentation": {}
    },
    {
        "label": "MAX_EXPORT_RECORDS",
        "kind": 5,
        "importPath": "student.constants",
        "description": "student.constants",
        "peekOfCode": "MAX_EXPORT_RECORDS = 5000\n# Search settings\nMIN_SEARCH_LENGTH = 2\nSEARCH_FIELDS = [\n    'first_name', 'last_name', 'student_id', 'email',\n    'phone', 'guardian_name', 'guardian_phone'\n]\n# Validation settings\nMIN_AGE = 10\nMAX_AGE = 25",
        "detail": "student.constants",
        "documentation": {}
    },
    {
        "label": "MIN_SEARCH_LENGTH",
        "kind": 5,
        "importPath": "student.constants",
        "description": "student.constants",
        "peekOfCode": "MIN_SEARCH_LENGTH = 2\nSEARCH_FIELDS = [\n    'first_name', 'last_name', 'student_id', 'email',\n    'phone', 'guardian_name', 'guardian_phone'\n]\n# Validation settings\nMIN_AGE = 10\nMAX_AGE = 25\nMIN_YEAR_ADMITTED = 2000\n# File paths",
        "detail": "student.constants",
        "documentation": {}
    },
    {
        "label": "SEARCH_FIELDS",
        "kind": 5,
        "importPath": "student.constants",
        "description": "student.constants",
        "peekOfCode": "SEARCH_FIELDS = [\n    'first_name', 'last_name', 'student_id', 'email',\n    'phone', 'guardian_name', 'guardian_phone'\n]\n# Validation settings\nMIN_AGE = 10\nMAX_AGE = 25\nMIN_YEAR_ADMITTED = 2000\n# File paths\nSTUDENT_PHOTO_UPLOAD_PATH = 'students/photos/'",
        "detail": "student.constants",
        "documentation": {}
    },
    {
        "label": "MIN_AGE",
        "kind": 5,
        "importPath": "student.constants",
        "description": "student.constants",
        "peekOfCode": "MIN_AGE = 10\nMAX_AGE = 25\nMIN_YEAR_ADMITTED = 2000\n# File paths\nSTUDENT_PHOTO_UPLOAD_PATH = 'students/photos/'\nBULK_UPLOAD_TEMP_PATH = 'temp/uploads/'",
        "detail": "student.constants",
        "documentation": {}
    },
    {
        "label": "MAX_AGE",
        "kind": 5,
        "importPath": "student.constants",
        "description": "student.constants",
        "peekOfCode": "MAX_AGE = 25\nMIN_YEAR_ADMITTED = 2000\n# File paths\nSTUDENT_PHOTO_UPLOAD_PATH = 'students/photos/'\nBULK_UPLOAD_TEMP_PATH = 'temp/uploads/'",
        "detail": "student.constants",
        "documentation": {}
    },
    {
        "label": "MIN_YEAR_ADMITTED",
        "kind": 5,
        "importPath": "student.constants",
        "description": "student.constants",
        "peekOfCode": "MIN_YEAR_ADMITTED = 2000\n# File paths\nSTUDENT_PHOTO_UPLOAD_PATH = 'students/photos/'\nBULK_UPLOAD_TEMP_PATH = 'temp/uploads/'",
        "detail": "student.constants",
        "documentation": {}
    },
    {
        "label": "STUDENT_PHOTO_UPLOAD_PATH",
        "kind": 5,
        "importPath": "student.constants",
        "description": "student.constants",
        "peekOfCode": "STUDENT_PHOTO_UPLOAD_PATH = 'students/photos/'\nBULK_UPLOAD_TEMP_PATH = 'temp/uploads/'",
        "detail": "student.constants",
        "documentation": {}
    },
    {
        "label": "BULK_UPLOAD_TEMP_PATH",
        "kind": 5,
        "importPath": "student.constants",
        "description": "student.constants",
        "peekOfCode": "BULK_UPLOAD_TEMP_PATH = 'temp/uploads/'",
        "detail": "student.constants",
        "documentation": {}
    },
    {
        "label": "StudentManagementError",
        "kind": 6,
        "importPath": "student.exceptions",
        "description": "student.exceptions",
        "peekOfCode": "class StudentManagementError(Exception):\n    \"\"\"Base exception for student management errors\"\"\"\n    pass\nclass StudentValidationError(StudentManagementError):\n    \"\"\"Raised when student data validation fails\"\"\"\n    pass\nclass BulkUploadError(StudentManagementError):\n    \"\"\"Raised when bulk upload operations fail\"\"\"\n    pass\nclass StudentNotFoundError(StudentManagementError):",
        "detail": "student.exceptions",
        "documentation": {}
    },
    {
        "label": "StudentValidationError",
        "kind": 6,
        "importPath": "student.exceptions",
        "description": "student.exceptions",
        "peekOfCode": "class StudentValidationError(StudentManagementError):\n    \"\"\"Raised when student data validation fails\"\"\"\n    pass\nclass BulkUploadError(StudentManagementError):\n    \"\"\"Raised when bulk upload operations fail\"\"\"\n    pass\nclass StudentNotFoundError(StudentManagementError):\n    \"\"\"Raised when a student cannot be found\"\"\"\n    pass\nclass PromotionError(StudentManagementError):",
        "detail": "student.exceptions",
        "documentation": {}
    },
    {
        "label": "BulkUploadError",
        "kind": 6,
        "importPath": "student.exceptions",
        "description": "student.exceptions",
        "peekOfCode": "class BulkUploadError(StudentManagementError):\n    \"\"\"Raised when bulk upload operations fail\"\"\"\n    pass\nclass StudentNotFoundError(StudentManagementError):\n    \"\"\"Raised when a student cannot be found\"\"\"\n    pass\nclass PromotionError(StudentManagementError):\n    \"\"\"Raised when student promotion fails\"\"\"\n    pass\nclass InvalidCSVError(BulkUploadError):",
        "detail": "student.exceptions",
        "documentation": {}
    },
    {
        "label": "StudentNotFoundError",
        "kind": 6,
        "importPath": "student.exceptions",
        "description": "student.exceptions",
        "peekOfCode": "class StudentNotFoundError(StudentManagementError):\n    \"\"\"Raised when a student cannot be found\"\"\"\n    pass\nclass PromotionError(StudentManagementError):\n    \"\"\"Raised when student promotion fails\"\"\"\n    pass\nclass InvalidCSVError(BulkUploadError):\n    \"\"\"Raised when CSV file format is invalid\"\"\"\n    pass\nclass DuplicateStudentError(StudentValidationError):",
        "detail": "student.exceptions",
        "documentation": {}
    },
    {
        "label": "PromotionError",
        "kind": 6,
        "importPath": "student.exceptions",
        "description": "student.exceptions",
        "peekOfCode": "class PromotionError(StudentManagementError):\n    \"\"\"Raised when student promotion fails\"\"\"\n    pass\nclass InvalidCSVError(BulkUploadError):\n    \"\"\"Raised when CSV file format is invalid\"\"\"\n    pass\nclass DuplicateStudentError(StudentValidationError):\n    \"\"\"Raised when attempting to create duplicate student\"\"\"\n    pass",
        "detail": "student.exceptions",
        "documentation": {}
    },
    {
        "label": "InvalidCSVError",
        "kind": 6,
        "importPath": "student.exceptions",
        "description": "student.exceptions",
        "peekOfCode": "class InvalidCSVError(BulkUploadError):\n    \"\"\"Raised when CSV file format is invalid\"\"\"\n    pass\nclass DuplicateStudentError(StudentValidationError):\n    \"\"\"Raised when attempting to create duplicate student\"\"\"\n    pass",
        "detail": "student.exceptions",
        "documentation": {}
    },
    {
        "label": "DuplicateStudentError",
        "kind": 6,
        "importPath": "student.exceptions",
        "description": "student.exceptions",
        "peekOfCode": "class DuplicateStudentError(StudentValidationError):\n    \"\"\"Raised when attempting to create duplicate student\"\"\"\n    pass",
        "detail": "student.exceptions",
        "documentation": {}
    },
    {
        "label": "StudentForm",
        "kind": 6,
        "importPath": "student.forms",
        "description": "student.forms",
        "peekOfCode": "class StudentForm(forms.ModelForm):\n    \"\"\"Form for creating and updating student records\"\"\"\n    class Meta:\n        model = Student\n        fields = [\n            'first_name', 'middle_name', 'last_name', 'gender', 'date_of_birth',\n            'email', 'phone', 'address', 'ghana_card_number', 'year_admitted',\n            'current_class', 'house', 'guardian_name', 'guardian_phone',\n            'guardian_email', 'relationship_to_guardian'\n        ]",
        "detail": "student.forms",
        "documentation": {}
    },
    {
        "label": "BulkUploadForm",
        "kind": 6,
        "importPath": "student.forms",
        "description": "student.forms",
        "peekOfCode": "class BulkUploadForm(forms.Form):\n    \"\"\"Form for bulk uploading students from CSV\"\"\"\n    csv_file = forms.FileField(\n        label=\"CSV File\",\n        help_text=\"Upload a CSV file with student data. Download template for format.\",\n        widget=forms.FileInput(attrs={\n            'class': 'form-control',\n            'accept': '.csv'\n        })\n    )",
        "detail": "student.forms",
        "documentation": {}
    },
    {
        "label": "PromotionForm",
        "kind": 6,
        "importPath": "student.forms",
        "description": "student.forms",
        "peekOfCode": "class PromotionForm(forms.Form):\n    \"\"\"Form for promoting students to next class/level\"\"\"\n    from_class = forms.ModelChoiceField(\n        queryset=Class.objects.all().order_by('level', 'programme__code', 'name'),\n        widget=forms.Select(attrs={\n            'class': 'form-select',\n            'id': 'id_from_class'\n        }),\n        help_text=\"Select the class to promote students from\"\n    )",
        "detail": "student.forms",
        "documentation": {}
    },
    {
        "label": "StudentSearchForm",
        "kind": 6,
        "importPath": "student.forms",
        "description": "student.forms",
        "peekOfCode": "class StudentSearchForm(forms.Form):\n    \"\"\"Form for searching and filtering students\"\"\"\n    search = forms.CharField(\n        required=False,\n        widget=forms.TextInput(attrs={\n            'class': 'form-control',\n            'placeholder': 'Search by name, student ID, or email...'\n        })\n    )\n    class_filter = forms.ModelChoiceField(",
        "detail": "student.forms",
        "documentation": {}
    },
    {
        "label": "StudentProfileForm",
        "kind": 6,
        "importPath": "student.forms",
        "description": "student.forms",
        "peekOfCode": "class StudentProfileForm(forms.ModelForm):\n    \"\"\"Form for students to update their own profile (limited fields)\"\"\"\n    class Meta:\n        model = Student\n        fields = ['email', 'phone', 'address']\n        widgets = {\n            'email': forms.EmailInput(attrs={\n                'class': 'form-control',\n                'placeholder': 'your.email@example.com'\n            }),",
        "detail": "student.forms",
        "documentation": {}
    },
    {
        "label": "student_post_save",
        "kind": 2,
        "importPath": "student.signals",
        "description": "student.signals",
        "peekOfCode": "def student_post_save(sender, instance, created, **kwargs):\n    \"\"\"Handle post-save operations for Student model\"\"\"\n    if created and not instance.user:\n        # Auto-create user account for new students\n        try:\n            from account.models import create_student_with_user\n            create_student_with_user(\n                first_name=instance.first_name,\n                last_name=instance.last_name,\n                year_admitted=instance.year_admitted,",
        "detail": "student.signals",
        "documentation": {}
    },
    {
        "label": "student_pre_delete",
        "kind": 2,
        "importPath": "student.signals",
        "description": "student.signals",
        "peekOfCode": "def student_pre_delete(sender, instance, **kwargs):\n    \"\"\"Handle pre-delete operations for Student model\"\"\"\n    # Deactivate associated user account instead of deleting\n    if instance.user:\n        instance.user.is_active = False\n        instance.user.save()",
        "detail": "student.signals",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "student.signals",
        "description": "student.signals",
        "peekOfCode": "User = get_user_model()\n@receiver(post_save, sender=Student)\ndef student_post_save(sender, instance, created, **kwargs):\n    \"\"\"Handle post-save operations for Student model\"\"\"\n    if created and not instance.user:\n        # Auto-create user account for new students\n        try:\n            from account.models import create_student_with_user\n            create_student_with_user(\n                first_name=instance.first_name,",
        "detail": "student.signals",
        "documentation": {}
    },
    {
        "label": "StudentModelTest",
        "kind": 6,
        "importPath": "student.tests",
        "description": "student.tests",
        "peekOfCode": "class StudentModelTest(TestCase):\n    \"\"\"Test cases for Student model\"\"\"\n    def setUp(self):\n        \"\"\"Set up test data\"\"\"\n        # Create school\n        self.school = School.objects.create(\n            name='Test School',\n            code='TEST',\n            phone='0244123456',\n            email='test@school.com'",
        "detail": "student.tests",
        "documentation": {}
    },
    {
        "label": "StudentFormTest",
        "kind": 6,
        "importPath": "student.tests",
        "description": "student.tests",
        "peekOfCode": "class StudentFormTest(TestCase):\n    \"\"\"Test cases for StudentForm\"\"\"\n    def setUp(self):\n        \"\"\"Set up test data\"\"\"\n        self.programme = Programme.objects.create(name='Science', code='SCI')\n        self.house = House.objects.create(name='Blue House')\n        self.test_class = Class.objects.create(\n            name='A',\n            programme=self.programme,\n            level=1",
        "detail": "student.tests",
        "documentation": {}
    },
    {
        "label": "StudentViewTest",
        "kind": 6,
        "importPath": "student.tests",
        "description": "student.tests",
        "peekOfCode": "class StudentViewTest(TestCase):\n    \"\"\"Test cases for Student views\"\"\"\n    def setUp(self):\n        \"\"\"Set up test data\"\"\"\n        # Create user and login\n        self.user = User.objects.create_user(\n            username='admin',\n            password='testpass123',\n            is_admin=True\n        )",
        "detail": "student.tests",
        "documentation": {}
    },
    {
        "label": "BulkUploadTest",
        "kind": 6,
        "importPath": "student.tests",
        "description": "student.tests",
        "peekOfCode": "class BulkUploadTest(TestCase):\n    \"\"\"Test cases for bulk upload functionality\"\"\"\n    def setUp(self):\n        \"\"\"Set up test data\"\"\"\n        self.programme = Programme.objects.create(name='Science', code='SCI')\n        self.house = House.objects.create(name='Blue House')\n        self.test_class = Class.objects.create(\n            name='A',\n            programme=self.programme,\n            level=1",
        "detail": "student.tests",
        "documentation": {}
    },
    {
        "label": "PromotionTest",
        "kind": 6,
        "importPath": "student.tests",
        "description": "student.tests",
        "peekOfCode": "class PromotionTest(TestCase):\n    \"\"\"Test cases for student promotion functionality\"\"\"\n    def setUp(self):\n        \"\"\"Set up test data\"\"\"\n        self.programme = Programme.objects.create(name='Science', code='SCI')\n        self.house = House.objects.create(name='Blue House')\n        # Create classes\n        self.class_1a = Class.objects.create(\n            name='A',\n            programme=self.programme,",
        "detail": "student.tests",
        "documentation": {}
    },
    {
        "label": "StudentUtilsTest",
        "kind": 6,
        "importPath": "student.tests",
        "description": "student.tests",
        "peekOfCode": "class StudentUtilsTest(TestCase):\n    \"\"\"Test cases for student utility functions\"\"\"\n    def setUp(self):\n        \"\"\"Set up test data\"\"\"\n        self.programme = Programme.objects.create(name='Science', code='SCI')\n        self.house = House.objects.create(name='Blue House')\n        self.test_class = Class.objects.create(\n            name='A',\n            programme=self.programme,\n            level=1",
        "detail": "student.tests",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "student.tests",
        "description": "student.tests",
        "peekOfCode": "User = get_user_model()\nclass StudentModelTest(TestCase):\n    \"\"\"Test cases for Student model\"\"\"\n    def setUp(self):\n        \"\"\"Set up test data\"\"\"\n        # Create school\n        self.school = School.objects.create(\n            name='Test School',\n            code='TEST',\n            phone='0244123456',",
        "detail": "student.tests",
        "documentation": {}
    },
    {
        "label": "process_bulk_student_upload",
        "kind": 2,
        "importPath": "student.utils",
        "description": "student.utils",
        "peekOfCode": "def process_bulk_student_upload(csv_file, default_class=None, default_house=None):\n    \"\"\"\n    Process bulk student upload from CSV file\n    Args:\n        csv_file: Uploaded CSV file\n        default_class: Default class for students without class specified\n        default_house: Default house for students without house specified\n    Returns:\n        dict: Results with success_count, error_count, and errors list\n    \"\"\"",
        "detail": "student.utils",
        "documentation": {}
    },
    {
        "label": "promote_students",
        "kind": 2,
        "importPath": "student.utils",
        "description": "student.utils",
        "peekOfCode": "def promote_students(students_queryset, to_class):\n    \"\"\"\n    Promote selected students to a new class\n    Args:\n        students_queryset: QuerySet of students to promote\n        to_class: Class object to promote students to\n    Returns:\n        dict: Results with success_count and errors\n    \"\"\"\n    results = {",
        "detail": "student.utils",
        "documentation": {}
    },
    {
        "label": "demote_students",
        "kind": 2,
        "importPath": "student.utils",
        "description": "student.utils",
        "peekOfCode": "def demote_students(students_queryset, to_class):\n    \"\"\"\n    Demote selected students to a different class (typically lower level)\n    Args:\n        students_queryset: QuerySet of students to demote\n        to_class: Class object to demote students to\n    Returns:\n        dict: Results with success_count and errors\n    \"\"\"\n    results = {",
        "detail": "student.utils",
        "documentation": {}
    },
    {
        "label": "generate_student_report",
        "kind": 2,
        "importPath": "student.utils",
        "description": "student.utils",
        "peekOfCode": "def generate_student_report(filters=None):\n    \"\"\"\n    Generate comprehensive student report based on filters\n    Args:\n        filters: Dictionary of filters to apply\n    Returns:\n        dict: Report data\n    \"\"\"\n    queryset = Student.objects.filter(is_active=True).select_related(\n        'current_class', 'house', 'current_class__programme'",
        "detail": "student.utils",
        "documentation": {}
    },
    {
        "label": "validate_student_data",
        "kind": 2,
        "importPath": "student.utils",
        "description": "student.utils",
        "peekOfCode": "def validate_student_data(data):\n    \"\"\"\n    Validate student data for bulk operations\n    Args:\n        data: Dictionary of student data\n    Returns:\n        dict: Validation results with is_valid and errors\n    \"\"\"\n    errors = []\n    # Required fields",
        "detail": "student.utils",
        "documentation": {}
    },
    {
        "label": "export_students_to_csv",
        "kind": 2,
        "importPath": "student.utils",
        "description": "student.utils",
        "peekOfCode": "def export_students_to_csv(students_queryset):\n    \"\"\"\n    Export students to CSV format\n    Args:\n        students_queryset: QuerySet of students to export\n    Returns:\n        str: CSV content\n    \"\"\"\n    output = io.StringIO()\n    writer = csv.writer(output)",
        "detail": "student.utils",
        "documentation": {}
    },
    {
        "label": "IsAdminOrTeacherMixin",
        "kind": 6,
        "importPath": "student.views",
        "description": "student.views",
        "peekOfCode": "class IsAdminOrTeacherMixin(UserPassesTestMixin):\n    \"\"\"Mixin to ensure only admin or teacher users can access views\"\"\"\n    def test_func(self):\n        return self.request.user.is_authenticated and (\n            self.request.user.is_admin or self.request.user.is_teacher\n            or self.request.user.is_superuser\n        )\nclass StudentListView(LoginRequiredMixin, IsAdminOrTeacherMixin, ListView):\n    \"\"\"List all students with filtering and search capabilities\"\"\"\n    model = Student",
        "detail": "student.views",
        "documentation": {}
    },
    {
        "label": "StudentListView",
        "kind": 6,
        "importPath": "student.views",
        "description": "student.views",
        "peekOfCode": "class StudentListView(LoginRequiredMixin, IsAdminOrTeacherMixin, ListView):\n    \"\"\"List all students with filtering and search capabilities\"\"\"\n    model = Student\n    template_name = 'student/student_list.html'\n    context_object_name = 'students'\n    paginate_by = 20\n    def get_queryset(self):\n        queryset = Student.objects.select_related(\n            'current_class', 'house', 'current_class__programme'\n        ).filter(is_active=True)",
        "detail": "student.views",
        "documentation": {}
    },
    {
        "label": "StudentDetailView",
        "kind": 6,
        "importPath": "student.views",
        "description": "student.views",
        "peekOfCode": "class StudentDetailView(LoginRequiredMixin, IsAdminOrTeacherMixin, DetailView):\n    \"\"\"Detailed view of a single student\"\"\"\n    model = Student\n    template_name = 'student/student_detail.html'\n    context_object_name = 'student'\n    def get_queryset(self):\n        return Student.objects.select_related(\n            'current_class', 'house', 'current_class__programme', 'user'\n        )\nclass StudentCreateView(LoginRequiredMixin, IsAdminOrTeacherMixin, CreateView):",
        "detail": "student.views",
        "documentation": {}
    },
    {
        "label": "StudentCreateView",
        "kind": 6,
        "importPath": "student.views",
        "description": "student.views",
        "peekOfCode": "class StudentCreateView(LoginRequiredMixin, IsAdminOrTeacherMixin, CreateView):\n    \"\"\"Create a new student\"\"\"\n    model = Student\n    form_class = StudentForm\n    template_name = 'student/student_form.html'\n    success_url = reverse_lazy('student:student_list')\n    def form_valid(self, form):\n        \"\"\"Create user account along with student profile\"\"\"\n        try:\n            with transaction.atomic():",
        "detail": "student.views",
        "documentation": {}
    },
    {
        "label": "StudentUpdateView",
        "kind": 6,
        "importPath": "student.views",
        "description": "student.views",
        "peekOfCode": "class StudentUpdateView(LoginRequiredMixin, IsAdminOrTeacherMixin, UpdateView):\n    \"\"\"Update student information\"\"\"\n    model = Student\n    form_class = StudentForm\n    template_name = 'student/student_form.html'\n    def get_success_url(self):\n        return reverse('student:student_detail', kwargs={'pk': self.object.pk})\n    def form_valid(self, form):\n        messages.success(\n            self.request, 'Student information updated successfully!')",
        "detail": "student.views",
        "documentation": {}
    },
    {
        "label": "StudentDeleteView",
        "kind": 6,
        "importPath": "student.views",
        "description": "student.views",
        "peekOfCode": "class StudentDeleteView(LoginRequiredMixin, IsAdminOrTeacherMixin, DeleteView):\n    \"\"\"Soft delete a student (set is_active=False)\"\"\"\n    model = Student\n    template_name = 'student/student_confirm_delete.html'\n    success_url = reverse_lazy('student:student_list')\n    def delete(self, request, *args, **kwargs):\n        \"\"\"Soft delete - set is_active to False instead of actual deletion\"\"\"\n        self.object = self.get_object()\n        self.object.is_active = False\n        self.object.save()",
        "detail": "student.views",
        "documentation": {}
    },
    {
        "label": "BulkUploadView",
        "kind": 6,
        "importPath": "student.views",
        "description": "student.views",
        "peekOfCode": "class BulkUploadView(LoginRequiredMixin, IsAdminOrTeacherMixin, FormView):\n    \"\"\"Bulk upload students from CSV file\"\"\"\n    form_class = BulkUploadForm\n    template_name = 'student/bulk_upload.html'\n    success_url = reverse_lazy('student:student_list')\n    def form_valid(self, form):\n        csv_file = form.cleaned_data['csv_file']\n        default_class = form.cleaned_data.get('default_class')\n        default_house = form.cleaned_data.get('default_house')\n        try:",
        "detail": "student.views",
        "documentation": {}
    },
    {
        "label": "PromotionView",
        "kind": 6,
        "importPath": "student.views",
        "description": "student.views",
        "peekOfCode": "class PromotionView(LoginRequiredMixin, IsAdminOrTeacherMixin, FormView):\n    \"\"\"Promote students to the next class/level\"\"\"\n    form_class = PromotionForm\n    template_name = 'student/promotion.html'\n    success_url = reverse_lazy('student:student_list')\n    def form_valid(self, form):\n        from_class = form.cleaned_data['from_class']\n        to_class = form.cleaned_data['to_class']\n        selected_students = form.cleaned_data['students']\n        try:",
        "detail": "student.views",
        "documentation": {}
    },
    {
        "label": "InactiveStudentsView",
        "kind": 6,
        "importPath": "student.views",
        "description": "student.views",
        "peekOfCode": "class InactiveStudentsView(LoginRequiredMixin, IsAdminOrTeacherMixin, ListView):\n    \"\"\"List inactive/deactivated students\"\"\"\n    model = Student\n    template_name = 'student/inactive_students.html'\n    context_object_name = 'students'\n    paginate_by = 20\n    def get_queryset(self):\n        return Student.objects.filter(is_active=False).order_by('-updated_at')\n@login_required\ndef reactivate_student(request, pk):",
        "detail": "student.views",
        "documentation": {}
    },
    {
        "label": "download_template",
        "kind": 2,
        "importPath": "student.views",
        "description": "student.views",
        "peekOfCode": "def download_template(request):\n    \"\"\"Download CSV template for bulk upload\"\"\"\n    response = HttpResponse(content_type='text/csv')\n    response['Content-Disposition'] = 'attachment; filename=\"student_upload_template.csv\"'\n    writer = csv.writer(response)\n    writer.writerow([\n        'first_name', 'middle_name', 'last_name', 'gender', 'date_of_birth',\n        'email', 'phone', 'address', 'ghana_card_number', 'year_admitted',\n        'class_name', 'house_name', 'guardian_name', 'guardian_phone',\n        'guardian_email', 'relationship_to_guardian'",
        "detail": "student.views",
        "documentation": {}
    },
    {
        "label": "ajax_get_students_by_class",
        "kind": 2,
        "importPath": "student.views",
        "description": "student.views",
        "peekOfCode": "def ajax_get_students_by_class(request):\n    \"\"\"AJAX endpoint to get students by class for promotion/demotion\"\"\"\n    class_id = request.GET.get('class_id')\n    if class_id:\n        students = Student.objects.filter(\n            current_class_id=class_id, is_active=True\n        ).values('id', 'first_name', 'last_name', 'student_id')\n        return JsonResponse({\n            'students': list(students)\n        })",
        "detail": "student.views",
        "documentation": {}
    },
    {
        "label": "student_statistics",
        "kind": 2,
        "importPath": "student.views",
        "description": "student.views",
        "peekOfCode": "def student_statistics(request):\n    \"\"\"Display student statistics dashboard\"\"\"\n    context = {\n        'total_students': Student.objects.filter(is_active=True).count(),\n        'students_by_level': Student.objects.filter(is_active=True).values(\n            'current_class__level'\n        ).annotate(count=Count('id')).order_by('current_class__level'),\n        'students_by_gender': Student.objects.filter(is_active=True).values(\n            'gender'\n        ).annotate(count=Count('id')),",
        "detail": "student.views",
        "documentation": {}
    },
    {
        "label": "reactivate_student",
        "kind": 2,
        "importPath": "student.views",
        "description": "student.views",
        "peekOfCode": "def reactivate_student(request, pk):\n    \"\"\"Reactivate a deactivated student\"\"\"\n    if not (request.user.is_admin or request.user.is_superuser):\n        messages.error(\n            request, 'You do not have permission to reactivate students.')\n        return redirect('student:student_list')\n    student = get_object_or_404(Student, pk=pk)\n    student.is_active = True\n    student.save()\n    # Reactivate user account if exists",
        "detail": "student.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'app.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]